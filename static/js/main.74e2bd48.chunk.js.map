{"version":3,"sources":["backend/vocab.tsv","backend/morphs.tsv","backend/esv.tsv","backend/na28.tsv","backend/Filters.js","backend/Data.js","App.js","reportWebVitals.js","index.js"],"names":["CASE","GENDER","NUMBER","MOOD","PART","PERSON","TENSE","VOICE","CHAPTER","GLOSS","LEMMA","REFERENCE","RESULT","ESV","NA28","ALL","Papa","require","Data","vocabMap","vocab","forEach","v","temp","morphs","filter","morph","console","log","push","Object","assign","parseInt","full","callback","length","parse","vocabFile","delimiter","download","header","complete","results","data","result","loadFull","keys","esv","na28","getRecords","morphsFile","esvFile","na28File","filters","row","every","fil","Array","isArray","includes","map","refs","split","ref","Math","floor","random","App","props","state","records","display","fields","showOffcanvas","limit","updateFilters","bind","updateFields","updateRecords","setOffcanvas","downloadRecords","loadData","setState","type","value","this","currFilters","newFilters","slice","splice","indexOf","index","text","field","join","blob","Blob","saveAs","className","Container","ButtonToolbar","style","justifyContent","filterType","ToggleButtonGroup","id","size","filterValue","ToggleButton","variant","onClick","e","Row","Col","Button","marginTop","ButtonGroup","defaultValue","active","Table","responsive","striped","bordered","hover","whiteSpace","record","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74e2bd48.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/vocab.56686cfc.tsv\";","export default __webpack_public_path__ + \"static/media/morphs.2386e766.tsv\";","export default __webpack_public_path__ + \"static/media/esv.f6ea5fd3.tsv\";","export default __webpack_public_path__ + \"static/media/na28.2e06aedb.tsv\";","// case\nexport const CASE = \"Case\" \nexport const NOMINATIVE = \"nom\"\nexport const GENITIVE = \"gen\"\nexport const DATIVE = \"dat\"\nexport const ACCUSATIVE = \"acc\"\nexport const VOCATIVE = \"voc\"\n\n// gender\nexport const GENDER = \"Gender\";\nexport const FEMININE = \"fem\"\nexport const MASCULINE = \"mas\"\nexport const NEUTER = \"neu\"\n\n// number\nexport const NUMBER = \"Number\"\nexport const SINGULAR = \"sg\"\nexport const PLURAL = \"pl\"\n\n// mood\nexport const MOOD = \"Mood\"\n\n// part of speech\nexport const PART = \"Part of Speech\"\nexport const ADJECTIVE = \"adjective\"\nexport const NOUN = \"noun\"\nexport const VERB = \"verb\"\n\n// person\nexport const PERSON = \"Person\"\nexport const FIRST = \"1p\"\nexport const SECOND = \"2p\"\nexport const THIRD = \"3p\"\n\n// tense\nexport const TENSE = \"Tense\"\nexport const AORIST = \"aor\"\nexport const PRESENT = \"pres\"\nexport const FUTURE = \"futr\"\nexport const IMPERFECT = \"impft\"\n\n// voice\nexport const VOICE = \"Voice\"\nexport const MIDDLE = \"mid\"\nexport const PASSIVE = \"pass\"\nexport const ACTIVE = \"actv\"\n\n// other headers\nexport const CHAPTER = \"Chapter\";\nexport const GLOSS = \"Gloss\";\nexport const LEMMA = \"Lemma\";\nexport const REFERENCE = \"Reference\"\nexport const RESULT = \"Result\"\nexport const TEXT = \"Text\"\nexport const ESV = \"Esv\"\nexport const NA28 = \"Na28\"\nexport const ADVERB = \"Adverb/particle Type\"\n\nexport const ALL = {\n  [GENDER]: [FEMININE, MASCULINE, NEUTER],\n  [CASE]: [NOMINATIVE, GENITIVE, DATIVE, ACCUSATIVE, VOCATIVE],\n  [PART]: [ADJECTIVE, NOUN, VERB],\n  [TENSE]: [PRESENT, IMPERFECT, FUTURE, AORIST],\n  [VOICE]: [ACTIVE, MIDDLE, PASSIVE],\n  [NUMBER]: [SINGULAR, PLURAL],\n}\n\nexport default ALL\n","import vocabFile from './vocab.tsv'\nimport morphsFile from './morphs.tsv'\nimport esvFile from './esv.tsv'\nimport na28File from './na28.tsv'\n\nimport {CHAPTER, ESV, LEMMA, NA28, REFERENCE, TEXT} from './Filters.js'\n\nconst Papa = require('papaparse');\n\nclass Data {\n  static vocab = []\n  static morphs = []\n  static esv = {}\n  static na28 = {}\n  static full = []\n\n  static loadFull() {\n    let vocabMap = {}\n    Data.vocab.forEach(v => vocabMap[v[LEMMA]] = v)\n\n    let temp = []\n    Data.morphs\n      .filter(morph => {\n        if (!vocabMap[morph[LEMMA]]) {\n          console.log(\"no vocab corresponding to morph for \" + morph[LEMMA])\n        }\n        return vocabMap[morph[LEMMA]]\n      })\n      .forEach(\n        morph => \n          temp.push(\n            Object.assign(\n              {}, \n              morph, \n              vocabMap[morph[LEMMA]],\n              { [CHAPTER]: parseInt(vocabMap[morph[LEMMA]][CHAPTER], 10) })))\n    Data.full = temp\n  }\n\n  static loadData(callback) {\n    console.log(\"loadData\")\n    if (Data.vocab.length === 0) {\n      Papa.parse(vocabFile, {\n        delimiter: '\\t',\n        download: true,\n        header: true,\n        complete: results => {\n          let temp = []\n          results.data\n            .filter(result => result['Lemma'])\n            .forEach(result => temp.push(result))\n          Data.vocab = temp\n\n          // post-processing\n          if (Data.vocab.length > 0 && Data.morphs.length > 0) {\n            Data.loadFull()\n          }\n          if (Data.vocab.length > 0 && \n              Data.morphs.length > 0 &&\n              Object.keys(Data.esv).length > 0 &&\n              Object.keys(Data.na28).length > 0) {\n            callback(Data.getRecords({}))\n          }\n        },\n      });\n    }\n\n    if (Data.morphs.length === 0) {\n      Papa.parse(morphsFile, {\n        delimiter: '\\t',\n        download: true,\n        header: true,\n        complete: results => {\n          let temp = []\n          results.data\n            .filter(result => result['Lemma'])\n            .forEach(result => temp.push(result))\n          Data.morphs = temp\n\n          // post-processing\n          if (Data.vocab.length > 0 && Data.morphs.length > 0) {\n            Data.loadFull()\n          }\n          if (Data.vocab.length > 0 &&\n              Data.morphs.length > 0 &&\n              Object.keys(Data.esv).length > 0 &&\n              Object.keys(Data.na28).length > 0) {\n            callback(Data.getRecords({}))\n          }\n        },\n      });\n    }\n\n    if (Object.keys(Data.esv).length === 0) {\n      Papa.parse(esvFile, {\n        delimiter: '\\t',\n        download: true,\n        header: true,\n        complete: results => {\n          results.data.forEach(result => Data.esv[result[REFERENCE]] = result[TEXT])\n          if (Data.vocab.length > 0 &&\n              Data.morphs.length > 0 &&\n              Object.keys(Data.esv).length > 0 &&\n              Object.keys(Data.na28).length > 0) {\n            callback(Data.getRecords({}))\n          }\n        }\n      });\n    }\n\n    if (Object.keys(Data.na28).length === 0) {\n      Papa.parse(na28File, {\n        delimiter: '\\t',\n        download: true,\n        header: true,\n        complete: results => {\n          results.data.forEach(result => Data.na28[result[REFERENCE]] = result[TEXT])\n          if (Data.vocab.length > 0 &&\n              Data.morphs.length > 0 &&\n              Object.keys(Data.esv).length > 0 &&\n              Object.keys(Data.na28).length > 0) {\n            callback(Data.getRecords({}))\n          }\n        }\n      });\n    }\n  }\n\n  static getRecords(filters) {\n    return Data.full\n      .filter(\n          row => Object.keys(filters).every(\n              fil => Array.isArray(filters[fil]) \n                  ? filters[fil].length === 0 || filters[fil].includes(row[fil])\n                  : row[fil] === filters[fil]))\n      .map(row => {\n        let refs = row[REFERENCE].split(',')\n        let ref = refs[Math.floor((Math.random() * refs.length))]\n        return Object.assign(\n            {}, \n            row, \n            { \n              [REFERENCE]: ref,\n              [ESV]: Data.esv[ref],\n              [NA28]: Data.na28[ref],\n            })\n      })\n  }\n}\n\nexport default Data;\n","import './App.css';\nimport React from 'react'\nimport Data from './backend/Data.js'\n\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Offcanvas from 'react-bootstrap/Offcanvas'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { saveAs } from 'file-saver';\n\n\nimport {ALL, ADVERB, RESULT, LEMMA, CASE, GENDER, NUMBER, MOOD, PART, PERSON, TENSE, VOICE, CHAPTER, GLOSS, REFERENCE, ESV, NA28} from './backend/Filters.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      records: [],\n      display: [],\n      filters: {},\n      fields: [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER, REFERENCE, ESV, NA28],\n      showOffcanvas: false,\n      limit: 20,\n    };\n    console.log(\"constructor\")\n\n    this.updateFilters = this.updateFilters.bind(this)\n    this.updateFields = this.updateFields.bind(this)\n    this.updateRecords = this.updateRecords.bind(this)\n    this.setOffcanvas = this.setOffcanvas.bind(this)\n    this.downloadRecords = this.downloadRecords.bind(this)\n  }\n\n  static fields = \n    [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER, ADVERB, REFERENCE, ESV, NA28]\n\n  componentDidMount() {\n    Data.loadData((records) => this.setState({ records: records }));\n  }\n\n  updateFilters(type, value) {\n    this.setState((state, props) => {\n      let currFilters = state.filters[type] || []\n      let newFilters = currFilters.slice()\n\n      if (currFilters.includes(value)) {\n        newFilters.splice(newFilters.indexOf(value), 1)\n      } else {\n        newFilters.push(value)\n      }\n\n      return { filters: Object.assign({}, state.filters, { [type]: newFilters }) }\n    })\n    // TODO: refresh here?\n  }\n\n  updateFields(value) {\n    this.setState((state, props) => {\n      let fields = (state.fields || []).slice()\n      if (fields.includes(value)) {\n        fields.splice(fields.indexOf(value), 1)\n      } else {\n        fields.push(value)\n      }\n\n      return { fields: fields }\n    })\n  }\n\n  updateRecords() {\n    let records = Data.getRecords(this.state.filters)\n    const index = Math.floor(Math.random() * records.length - this.state.limit)\n    this.setState(\n    { \n      records: records,\n      display: records.slice(index, index + this.state.limit),\n    })\n  }\n\n  downloadRecords() {\n    var text = App.fields.filter(field => this.state.fields.includes(field)).join('\\t') + '\\n' +\n      this.state.records.map(row => App.fields.filter(field => this.state.fields.includes(field)).map(field => row[field]).join('\\t')).join ('\\n')\n    var blob = new Blob([ text ], { type: \"text/plain;charset=utf-8\" })\n    saveAs(blob, \"hello.txt\")\n  }\n\n  setOffcanvas(value) {\n    this.setState({ showOffcanvas: value })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            \"SM Baugh A Greek Primer\"\n          </p>\n        </header>\n        <Container>\n          {/* filter selection */}\n            <ButtonToolbar style={{justifyContent: 'space-between'}}>\n\n            {Object.keys(ALL).map(filterType => (\n              <ToggleButtonGroup id={filterType} key={filterType} type=\"checkbox\" size=\"sm\" >\n                {ALL[filterType].map(filterValue => (\n                  <ToggleButton key={filterValue} id={filterValue} value={filterValue} variant='outline-success' onClick={(e) => this.updateFilters(filterType, filterValue, e)}>\n                    {filterValue}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n            ))}\n            </ButtonToolbar>\n          {/*\n          <Offcanvas show={this.state.showOffcanvas} onHide={(e) => this.setOffcanvas(false, e)} placement=\"start\" scoll=\"true\">\n            <Offcanvas.Header closeButton>\n              <Offcanvas.Title>Adjust filters</Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n              <Container>\n                {Object.keys(ALL).map(filterType => (\n                  <Row style={ { margin: '1rem' } }>\n                    <ToggleButtonGroup id={filterType} key={filterType} defaultValue={ALL[filterType]} type=\"checkbox\" size=\"sm\" style={{justifyContent: 'space-between'}}>\n                      {ALL[filterType].map(filterValue => (\n                        <ToggleButton key={filterValue} id={filterValue} value={filterValue} variant='outline-success' onClick={(e) => this.updateFilters(filterType, filterValue, e)}>\n                          {filterValue}\n                        </ToggleButton>\n                      ))}\n                    </ToggleButtonGroup>\n                  </Row>\n                ))}\n              <Button onClick={(e) => { this.updateRecords(e); this.setOffcanvas(false, e)} }>\n                Refresh!\n              </Button>\n              </Container>\n            </Offcanvas.Body>\n          </Offcanvas>\n          */}\n\n          {/* header section */}\n          <Row>\n            <Col>\n              <Button variant=\"primary\" onClick={(e) => this.setOffcanvas(true, e)} className=\"me-2\">\n                Adjust filters\n              </Button>\n            </Col>\n            <Col>\n              <Button onClick={this.updateRecords}>\n                Refresh!\n              </Button>\n            </Col>\n            <Col>\n              <Button onClick={this.downloadRecords}>\n                Download Set ({this.state.records.length} rows)\n              </Button>\n            </Col>\n          </Row>\n          <Row style={ { marginTop: '1rem' } }>\n            <Col>\n              {/* refresh! */}\n              <Row>\n                <Container>\n                </Container>\n              </Row>\n              <Row>\n                {/* select output */}\n                <ButtonGroup defaultValue={this.state.fields} size=\"sm\">\n                  {App.fields.map(field => (\n                    <Button key={field} id={field} value={field} active={this.state.fields.includes(field)} variant='outline-secondary' onClick={(e) => this.updateFields(field, e)}>\n                      {field}\n                    </Button>\n                  ))\n                  }\n                </ButtonGroup>\n              </Row>\n              {/* preview dataset */}\n              <Row>\n                <Table responsive striped bordered hover size=\"sm\">\n                  <thead>\n                    <tr>\n                      {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                          <th key={field} style={{whiteSpace: 'nowrap'}}>{field}</th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.display.map(record => (\n                        <tr key={'tr-' + record[RESULT]}>\n                          {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                            <td key={field} style={{whiteSpace: 'nowrap'}}>{record[field]}</td>\n                          ))}\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}