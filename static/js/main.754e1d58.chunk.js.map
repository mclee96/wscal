{"version":3,"sources":["data/morphs.tsv","data/net.tsv","data/na28.tsv","data/vocab.tsv","backend/Filters.js","backend/Data.js","backend/Engine.js","VocabSelect.js","App.js","reportWebVitals.js","index.js"],"names":["CASE","GENDER","NUMBER","MOOD","PARTICIPLE","PART","PERSON","TENSE","VOICE","CHAPTER","GLOSS","LEMMA","RESULT","SENSE","ENGLISH","GREEK","REFERENCE","ALL","Papa","require","Data","Promise","resolve","reject","Object","keys","localStorage","some","key","includes","clear","vocab","length","loadFile","vocabFilepath","contents","rows","parse","delimiter","header","data","forEach","row","push","morphs","morphFilepath","english","englishFilepath","quoteChar","greek","greekFilepath","id","filepath","callback","getItem","setItem","req","XMLHttpRequest","addEventListener","e","responseText","trim","open","send","Engine","filters","filter","every","field","map","references","split","reference","Math","floor","random","assign","validFields","values","getRecords","fields","reduce","l","r","groupby","join","arr","punctuation","ignore","verseRecords","flatMap","ref","verseWords","replaceAll","word","testableVerses","words","nontestableWords","translations","definitions","abbrvPOS","parsing","abbrv","defs","trans","slice","console","log","str","pos","chapters","VocabSelect","props","state","display","selected","parts","criteria","searchTimeout","onSelect","bind","search","addAll","togglePart","loadData","then","setState","prevProps","this","part","partIndex","indexOf","concat","preventDefault","clearTimeout","setTimeout","filtered","crit","range","num","isNaN","parseInt","i","normalized","normalize","replace","endsWith","toString","vocabHeadings","columnWidths","Alert","variant","style","textAlign","borderColor","Row","className","Col","Form","onSubmit","target","value","InputGroup","size","Control","type","placeholder","onChange","Button","disabled","ToggleButtonGroup","ToggleButton","lineHeight","fontSize","width","onClick","height","columnCount","columnWidth","index","rowCount","rowHeight","columnIndex","rowIndex","checked","padding","fontWeight","React","Component","App","records","limit","flashcardFields","flashcards","flashcardsPreview","showVocab","toggleFilter","updateFields","updateFlashcardFields","updateRecords","toggleSelect","downloadRecords","getSelected","currFilters","newFilters","splice","mode","disp","select","getTranslations","getFlashcards","flashcardsIndex","text","blob","Blob","outputFilename","Date","toLocaleString","hour12","filterSet","substr","saveAs","flattened","Container","fluid","sm","md","lg","xl","xxl","Collapse","in","dimension","Badge","pill","bg","as","borderWidth","marginTop","ButtonToolbar","justifyContent","filterType","filterValue","ButtonGroup","defaultValue","active","Table","responsive","striped","bordered","hover","whiteSpace","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.754e1d58.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/morphs.77bb1744.tsv\";","export default __webpack_public_path__ + \"static/media/net.eaad620a.tsv\";","export default __webpack_public_path__ + \"static/media/na28.13d3a11b.tsv\";","export default __webpack_public_path__ + \"static/media/vocab.88e2c3c1.tsv\";","// case\nexport const CASE = \"Case\" \nexport const NOMINATIVE = \"nominative\"\nexport const GENITIVE = \"genitive\"\nexport const DATIVE = \"dative\"\nexport const ACCUSATIVE = \"accusative\"\nexport const VOCATIVE = \"vocative\"\n\n// gender\nexport const GENDER = \"Gender\";\nexport const FEMININE = \"feminine\"\nexport const MASCULINE = \"masculine\"\nexport const NEUTER = \"neuter\"\n\n// number\nexport const NUMBER = \"Number\"\nexport const SINGULAR = \"singular\"\nexport const PLURAL = \"plural\"\n\n// mood\nexport const MOOD = \"Mood\"\nexport const INDICATIVE = \"indicative\"\nexport const IMPERATIVE = \"imperative\"\nexport const INFINITIVE = \"infinitive\"\nexport const SUBJUNCTIVE = \"subjunctive\"\nexport const PARTICIPLE = \"participle\"\n\n// part of speech\nexport const PART = \"Part\"\nexport const ADJECTIVE = \"adjective\"\nexport const ADVERB = \"adverb\"\nexport const CONJUNCTION = \"conjunction\"\nexport const NOUN = \"noun\"\nexport const PREPOSITION = \"preposition\"\nexport const PRONOUN = \"pronoun\"\nexport const VERB = \"verb\"\n\n// person\nexport const PERSON = \"Person\"\nexport const FIRST = \"first person\"\nexport const SECOND = \"second person\"\nexport const THIRD = \"third person\"\n\n// tense\nexport const TENSE = \"Tense\"\nexport const AORIST = \"aorist\"\nexport const PERFECT = \"perfect\"\nexport const PRESENT = \"present\"\nexport const FUTURE = \"future\"\nexport const IMPERFECT = \"imperfect\"\n\n// voice\nexport const VOICE = \"Voice\"\nexport const MIDDLE = \"middle\"\nexport const PASSIVE = \"passive\"\nexport const ACTIVE = \"active\"\n\n// other headers\nexport const CHAPTER = \"Chapter\";\nexport const GLOSS = \"Gloss\";\nexport const LEMMA = \"Lemma\";\nexport const RESULT = \"Result\"\nexport const TEXT = \"Text\"\nexport const ADVERB_TYPE = \"Adverb/particle Type\"\nexport const SENSE = \"Sense\"\n\n// bibles\nexport const ENGLISH = \"English\"\nexport const GREEK = \"Greek\"\nexport const ABBR = \"Abbr\"\nexport const REFERENCE = \"Reference\"\n\nexport const ALL = {\n  [TENSE]: [PRESENT, IMPERFECT, FUTURE, AORIST, PERFECT],\n  [VOICE]: [ACTIVE, MIDDLE, PASSIVE],\n  [MOOD]: [INDICATIVE, IMPERATIVE, INFINITIVE, SUBJUNCTIVE, PARTICIPLE]\n}\n\nexport default ALL\n","import morphFilepath from '../data/morphs.tsv'\nimport englishFilepath from '../data/net.tsv'\nimport greekFilepath from '../data/na28.tsv'\nimport vocabFilepath from '../data/vocab.tsv'\n\nimport { ABBR, TEXT } from './Filters.js'\n\nconst Papa = require('papaparse');\n\nclass Data {\n  static vocab = []\n  static morphs = []\n  static english = {}\n  static greek = {}\n\n  // idempotent\n  static loadData() {\n    return new Promise((resolve, reject) => {\n      // legacy reset\n      if (Object.keys(localStorage).some(key => key.includes('esv_filepath') || key.includes('na28_filepath'))) {\n        localStorage.clear()\n      }\n\n      if (Data.vocab.length === 0) {\n        Data.loadFile('vocab', vocabFilepath, (contents) => {\n          let rows = []\n          Papa.parse(contents, { delimiter: '\\t', header: true }).data\n            .forEach(row => rows.push(row))\n          Data.vocab = rows\n          resolve(Data.vocab)\n        })\n      } else {\n        resolve(Data.vocab)\n      }\n\n      if (Data.morphs.length === 0) {\n        Data.loadFile('morphs', morphFilepath, (contents) => {\n            let rows = []\n            Papa.parse(contents, { delimiter: '\\t', header: true }).data\n              .forEach(row => rows.push(row))\n            Data.morphs = rows\n        })\n      }\n\n      if (Object.keys(Data.english).length === 0) {\n        Data.loadFile('english', englishFilepath, (contents) => {\n          Papa.parse(contents, { delimiter: '\\t', header: true, quoteChar: '`' }).data\n            .forEach(row => Data.english[row[ABBR]] = row[TEXT])\n        })\n      }\n\n      if (Object.keys(Data.greek).length === 0) {\n        Data.loadFile('greek', greekFilepath, (contents) => {\n          Papa.parse(contents, { delimiter: '\\t', header: true }).data\n            .forEach(row => Data.greek[row[ABBR]] = row[TEXT])\n        })\n      }\n    })\n  }\n\n  static loadFile(id, filepath, callback) {\n    if (localStorage.getItem(id) != null && localStorage.getItem(id + '_filepath') === filepath) {\n      // cached result\n      if (callback) {\n        callback(localStorage.getItem(id))\n      }\n    } else {\n      localStorage.setItem(id + '_filepath', filepath)\n      let req = new XMLHttpRequest();\n      req.addEventListener(\"load\", (e) => {\n        localStorage.setItem(id, req.responseText.trim())\n        if (callback) {\n          callback(req.responseText.trim())\n        }\n      })\n      req.open(\"GET\", filepath);\n      req.send();\n    }\n  }\n}\n\nexport default Data;\n","import Data from './Data.js'\n\nimport { ABBR, CHAPTER, ENGLISH, PART, RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, GREEK, REFERENCE, TEXT, PARTICIPLE, SENSE } from './Filters.js'\n\nclass Engine {\n  static verseRecords = {}\n  static verseWords = {}\n\n  static getRecords(filters) {\n    return Data.morphs\n      // filter\n      .filter(row => row[CHAPTER] !== '-' &&\n          Object.keys(filters)\n            .every(field => row[field] === '-' || filters[field].includes(row[field])))\n      // return only a single reference\n      .map(row => {\n        let references = row[REFERENCE].split(',')\n        let reference = references[Math.floor((Math.random() * references.length))]\n        return Object.assign(\n            {}, \n            row, \n            { \n              [REFERENCE]: reference,\n              [ENGLISH]: Data.english[reference],\n              [GREEK]: Data.greek[reference],\n            })\n      })\n  }\n\n  static getFlashcards(filters, validFields) {\n    return Object.values(\n        Engine.getRecords(filters)\n          .map(row => {\n            var fields;\n            switch (row[PART]) {\n              case \"noun\":\n                fields = [ RESULT, LEMMA, GLOSS, GENDER, CASE, NUMBER, ENGLISH ]; break;\n              case \"verb\":\n                fields = (row[MOOD] === PARTICIPLE)\n                  ? [ RESULT, LEMMA, GLOSS, TENSE, VOICE, MOOD, GENDER, CASE, NUMBER, ENGLISH ]\n                  : [ RESULT, LEMMA, GLOSS, TENSE, VOICE, MOOD, PERSON, NUMBER, ENGLISH ]; \n                break;\n              case \"adjective\":\n                fields = [ RESULT, LEMMA, GLOSS, GENDER, CASE, NUMBER, ENGLISH ]; break;\n              case \"conjunction\":\n              case \"preposition, adverb\":\n              case \"preposition\":\n                fields = [ RESULT, LEMMA, GLOSS, ENGLISH ]; break;\n              case \"pronoun\":\n              case \"pronoun, adjective\":\n              case \"adjective, pronoun\":\n                fields = [ RESULT, LEMMA, GLOSS, PERSON, GENDER, CASE, NUMBER, ENGLISH ]; break;\n              default:\n                fields = [ RESULT ]; break;\n            }\n            return [row, fields.filter(field => validFields.includes(field))]\n          })\n          .reduce((l, r) => {\n            let groupby = r[1].filter(field => field !== ENGLISH).map(field => r[0][field]).join()\n            l[groupby] = (l[groupby] || r)\n            return l\n          }, {}))\n          .map(arr => {\n            let row = arr[0]\n            let fields = arr[1]\n\n            let front = row[RESULT]\n            let back = fields\n              .map(field => {\n                if (field === GLOSS) {\n                  return '(\"' + row[GLOSS]+ '\")';\n                } else if (field === ENGLISH) {\n                  return \"<> \" + row[REFERENCE] + \" \" + row[ENGLISH]\n                } else {\n                  return row[field]\n                }\n              })\n              .join(\" \")\n            return [front, back]\n          })\n  }\n\n  static getTranslations(filters) {\n    let punctuation = /[·,\\.;\\[\\]⟧—]/g\n    let ignore = [\n      // articles\n      \"ὁ\",\n      // people\n      \"Παῦλος\", \"Τιμόθεος\", \"Ἰσαάκ\", \"Σωσθένης\", \"Δαυίδ\", \"Σάρρα\", \"Ἅννα\",\n      \"Καϊάφας\", \"Ζαχαρίας\", \"Τίτος\", \"Σιλουανός\", \"Ἀβραάμ\", \"Ἰωάννης\",\n      \"Σαούλ\", \"Ἠλίας\", \"Ἁνανίας\", \"Ἀντιπᾶς\", \"Ἰησοῦς\", \"Μωϋσῆς\", \"Σίμων\",\n      \"Πιλᾶτος\", \"Μαρία\", \"Ἰακώβ\", \"Ἰούδας\", \"Πέτρος\", \"Ἰωσήφ\", \"Μαριάμ\",\n      \"Μελχισέδεκ\", \"Φίλιππος\", \"Μαγδαληνή\", \"Ἡρῴδης\", \"Κλήμης\", \"Ἰάκωβος\",\n      \"Βαρναβᾶς\", \"Ζεβεδαῖος\", \"Ἠσαΐας\", \"Βαραββᾶς\", \"Μάρθα\", \"Ἐλισάβετ\",\n      \"Στέφανος\", \"Ἀδάμ\", \"Λάζαρος\", \"Σαῦλος\", \"Θωμᾶς\", \"Νῶε\",\n      \"Φῆστος\", \"Ἰωνᾶς\", \"Συμεών\", \"Ἀνδρέας\", \"Σίλας\",\n      \"Ἀγρίππα\", \"Φῆλιξ\", \"Λευί\", \"Κιλικία\",\n      // places\n      \"Ἰουδαῖος\", \"Ἔφεσος\", \"Ἰερουσαλήμ\", \"Ἰσραήλ\", \"Ἰορδάνης\", \"Ἰουδαία\",\n      \"Σάρδεις\", \"Γαλιλαία\", \"Ναζαρέθ\", \"Βαβυλών\", \"Ἱεροσόλυμα\",\n      \"Αἴγυπτος\", \"Μακεδονία\", \"Σαμάρεια\", \"Καφαρναούμ\", \n      \"Ἀντιόχεια\", \"Καισάρεια\", \"Βηθλέεμ\", \"Δαμασκός\", \"Ἀσία\",\n      \"Βηθανία\", \"Συρία\",\n      // other\n      \"Βεελζεβούλ\", \"Χριστός\", \"Σαδδουκαῖος\", \"Ἰσραηλίτης\", \"Σιών\",\n      // familiar conjunctions\n      \"καί\", \"γάρ\", \"ὅτι\", \"δέ\"\n    ]\n\n    // instantiate verseRecords if necessary\n    if (Object.keys(Engine.verseRecords).length === 0) {\n      Data.morphs\n        .flatMap(row => row[REFERENCE].split(\",\")\n          .map(ref => Object.assign({}, row, { [REFERENCE]: ref })))\n        .forEach(row => {\n          if (!Engine.verseRecords[row[REFERENCE]]) {\n            Engine.verseRecords[row[REFERENCE]] = []\n          }\n          Engine.verseRecords[row[REFERENCE]].push(row)\n        })\n    }\n\n    // instantiate verseWords if necessary\n    if (Object.keys(Engine.verseWords).length === 0) {\n      Object.keys(Engine.verseRecords)\n        .map(ref => \n          Engine.verseWords[ref] = Data.greek[ref].replaceAll(punctuation, \"\").split(\" \").filter(word => word))\n    }\n\n    let testableVerses = []\n    Object.values(Engine.verseRecords)\n      // non-dictionary words condition\n      .filter(rows => {\n        let words = rows.map(row => row[RESULT])\n        return Engine.verseWords[rows[0][REFERENCE]].every(word => words.includes(word))\n      })\n      // testable words condition\n      .filter(rows => {\n        return rows\n          .filter(row => !ignore.includes(row[LEMMA]))\n          .filter(row => row[CHAPTER] !== '-')\n          .filter(row => Object.keys(filters)\n              .filter(field => filters[field].length !== 0)\n              .every(field => row[field] === '-' || filters[field].includes(row[field])))\n          .length >= 3\n      })\n      // non-testable words condition\n      .filter(rows => {\n        let nontestableWords = rows\n          .filter(row => !ignore.includes(row[LEMMA]))\n          .filter(row => {\n            return row[CHAPTER] === '-' ||\n            !Object.keys(filters)\n                .filter(field => filters[field].length !== 0)\n                .every(field => row[field] === '-' || filters[field].includes(row[field]))\n          })\n\n        return nontestableWords.length <= 1 && nontestableWords\n            .every(row => row[SENSE] !== '-' || row[GLOSS] !== '-')\n      })\n      .map(rows => testableVerses.push(rows[0][REFERENCE]))\n\n    let translations = []\n    testableVerses\n      .map(ref => {\n        let definitions = Engine.verseRecords[ref]\n          .filter(row => !ignore.includes(row[LEMMA]))\n          .filter(row => {\n            return row[CHAPTER] === '-' ||\n            !Object.keys(filters)\n                .filter(field => filters[field].length !== 0)\n                .every(field => row[field] === '-' || filters[field].includes(row[field]))\n          })\n          .map(row => \"<\" + row[LEMMA] + \", \" + Engine.abbrvPOS(row[PART]) + \": \" + \n              row[row[SENSE].includes(\"-\") ? GLOSS : SENSE] + \">\")\n\n        let parsing = Engine.verseWords[ref]\n          .map(word => Engine.verseRecords[ref]\n              .filter(row => word === row[RESULT])[0])\n          .filter(row => !ignore.includes(row[LEMMA]))\n          .map(row => {\n            let fields = []\n            switch (row[PART]) {\n                case \"noun\":\n                  fields = [ LEMMA, GENDER, CASE, NUMBER ]; break;\n                case \"verb\":\n                /* TODO: fix this\n                  switch (row.get(MOOD)) {\n                    case \"participle\":\n                      fields = new String[] { LEMMA, TENSE, VOICE, MOOD, GENDER, CASE }; break;\n                    case \"infinitive\":\n                      fields = new String[] { LEMMA, TENSE, VOICE, MOOD }; break;\n                    default:\n                      fields = new String[] { LEMMA, TENSE, VOICE, MOOD, PERSON, NUMBER }; break;\n                  }\n                  */\n                  fields = [ LEMMA, TENSE, VOICE, MOOD, PERSON, NUMBER ]; break;\n                case \"adjective\":\n                  fields = [ LEMMA, GENDER, CASE, NUMBER ]; break;\n                case \"conjunction\":\n                case \"preposition, adverb\":\n                case \"preposition\":\n                  fields = [ LEMMA ]; break;\n                case \"pronoun\":\n                case \"pronoun, adjective\":\n                case \"adjective, pronoun\":\n                  fields = [ LEMMA, PERSON, GENDER, CASE, NUMBER ]; break;\n                default:\n                  // System.out.println(\"unhandled word type \" + row.get(PART) + \" for \" + row.get(RESULT));\n                  fields = [ LEMMA ]; break;\n            }\n            return \"<\" + row[RESULT] + \": \" + fields\n                .map(field => Engine.abbrv(row[field]))\n                .join(\" \") + \">\";\n          })\n          .join(\" \")\n\n        let front = Data.greek[ref] + \" \" + definitions;\n        let back = ref + \" \" + Data.english[ref] + \" \" + parsing;\n\n        return {\n          ref: ref,\n          defs: definitions,\n          key: parsing,\n        }\n      })\n      .forEach(trans => translations.push(trans))\n\n    translations.slice(5)\n    .forEach(trans => console.log(trans))\n\n    \n  }\n\n  static abbrv(str) {\n    switch (str) {\n      // gender\n      case \"masculine\": return \"m\";\n      case \"feminine\": return \"f\";\n      case \"neuter\": return \"n\";\n\n      // person\n      case \"first person\": return \"1p\";\n      case \"second person\": return \"2p\";\n      case \"third person\": return \"3p\";\n\n      // number\n      case \"singular\": return \"sg\";\n      case \"plural\": return \"pl\";\n\n      // case\n      case \"nominative\": return \"n\";\n      case \"genitive\": return \"g\";\n      case \"dative\": return \"d\";\n      case \"accusative\": return \"a\";\n      case \"vocative\": return \"v\";\n\n      // tense\n      case \"present\": return \"P\";\n      case \"imperfect\": return \"I\";\n      case \"future\": return \"F\";\n      case \"aorist\": return \"A\";\n      case \"perfect\": return \"Pf\";\n\n      // voice\n      case \"active\": return \"A\";\n      case \"passive\": return \"P\";\n      case \"middle\": return \"M\";\n      case \"middle or passive\":\n      case \"either middle or passive\":\n      case \"passive, middle\": return \"M/P\";\n\n      // mood\n      case \"indicative\": return \"I\";\n      case \"participle\": return \"Ptc\";\n      case \"subjunctive\": return \"S\";\n      case \"imperative\": return \"Imp\";\n      case \"infinitive\": return \"Inf\";\n\n      default: return str;\n    }\n  }\n\n  static abbrvPOS(pos) {\n    switch (pos) {\n      case \"noun\": \n        return \"noun\";\n      case \"indeclinable, adjective\":\n      case \"adjective\": \n        return \"adj.\";\n      case \"adverb, particle\": \n      case \"adverb\": \n        return \"adv.\";\n      case \"preposition\": \n        return \"prep.\";\n      case \"conjunction\": \n        return \"conj.\";\n      case \"verb\": \n        return \"verb\";\n      case \"pronoun\":\n        return \"pron.\";\n      default: \n        return pos;\n    }\n  }\n\n  static getVocab(chapters) {\n    if (chapters) {\n      return Data.vocab\n        .filter(row => chapters.includes(row[CHAPTER]))\n    } else {\n      return Data.vocab\n    }\n  }\n}\n\nexport default Engine;\n","import React from 'react'\n\nimport Alert from 'react-bootstrap/Alert'\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Row from 'react-bootstrap/Row'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nimport { VariableSizeGrid } from 'react-window'\n\nimport Data from './backend/Data.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {LEMMA, CHAPTER, GLOSS, PART } from './backend/Filters.js'\nimport {NOUN, VERB, ADJECTIVE, PREPOSITION, PRONOUN, ADVERB, CONJUNCTION } from './backend/Filters.js'\n\nclass VocabSelect extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      display: [],\n      selected: props.selected,\n      parts: [],\n    }\n\n    this.criteria = ''\n    this.searchTimeout = 0\n    this.vocab = []\n\n    this.onSelect = props.onSelect.bind(this)\n    this.search = this.search.bind(this)\n    this.addAll = this.addAll.bind(this)\n    this.togglePart = this.togglePart.bind(this)\n  }\n\n  componentDidMount() {\n    Data.loadData().then((vocab) => {\n      this.vocab = vocab\n      this.setState({ display: vocab })\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected !== this.props.selected) {\n      this.setState({ selected: this.props.selected })\n    }\n  }\n\n  togglePart(part) {\n    this.setState((state, props) => {\n      let partIndex = state.parts.indexOf(part)\n      let parts = (partIndex > -1) \n          // remove\n          ?  state.parts.slice(0, partIndex).concat(state.parts.slice(partIndex + 1))\n          // add\n          :  [...state.parts].concat([part])\n      return {\n        parts: parts,\n        display: this.filter(this.criteria, parts)\n      }\n    })\n  }\n\n  search(criteria, e) {\n    this.criteria = criteria\n    e.preventDefault()\n\n    if (this.searchTimeout) {\n      clearTimeout(this.searchTimeout)\n    }\n\n    this.searchTimeout = \n      setTimeout(() => this.setState({ display: this.filter(criteria, this.state.parts) }), 100)\n  }\n\n  addAll(criteria, e) {\n    e.preventDefault()\n\n    criteria = criteria ? criteria : 'all'\n    let display = this.state.parts\n      ? criteria + ' ' + this.state.parts.map(part => part + 's').join()\n      : criteria\n    this.onSelect(display, this.filter(criteria, this.state.parts), 'add')\n  }\n\n  filter(criteria, parts) {\n    let filtered = []\n    criteria.trim().split(',')\n      .map(crit => {\n          var search = crit.trim()\n\n          // reset if no search\n          if (!search) {\n            return this.vocab\n          }\n\n          // handle number searching\n          var range = crit.replaceAll('ch', '').split('-')\n          if (range.every(num => !isNaN(num))) {\n            if (range.length < 2) {\n              range.push(parseInt(range[0]))\n            }\n            var rows = []\n            for (var i = parseInt(range[0]); i < parseInt(range[1]) + 1; i++) {\n              rows = rows.concat(\n                this.vocab\n                    .filter(row => {\n                      let normalized = Object.values(row)\n                        .join()\n                        .normalize('NFD')\n                        .replace(/[\\u0300-\\u036f]/g, \"\")\n                      return normalized.endsWith(',' + i.toString())\n                          && (parts.length === 0 || parts.some(part => normalized.includes(',' + part + ',')))\n                    }))\n            }\n            return rows\n          }\n\n          // handle plural and abbreviations\n          switch (search) {\n            case 'nouns':\n            case 'nns':\n            case 'nn': search = 'noun'; break;\n            case 'verbs':\n            case 'vbs':\n            case 'vb': search = 'verb'; break;\n            case 'adjectives':\n            case 'adjs':\n            case 'adj': search = 'adjective'; break;\n            case 'prepositions':\n            case 'preps':\n            case 'prep': search = 'preposition'; break;\n            case 'conjunctions':\n            case 'conjs':\n            case 'conj': search = 'conjunction'; break;\n            case 'adverbs':\n            case 'advbs':\n            case 'advb':\n            case 'adv': search = 'adverb'; break;\n            default:\n          }\n\n          let partsArr = ['noun', 'verb', 'adjective', 'preposition', 'conjunction', 'adverb']\n\n          // handle part searching\n          if (partsArr.includes(search)) {\n            return this.vocab\n                .filter(row => Object.values(row)\n                    .join()\n                    .normalize('NFD')\n                    .replace(/[\\u0300-\\u036f]/g, \"\")\n                    .includes(',' + search.normalize('NFD') + ','))\n          }\n\n          // default search\n          return this.vocab\n              .filter(row => {\n                let normalized = Object.values(row)\n                  .join()\n                  .normalize('NFD')\n                  .replace(/[\\u0300-\\u036f]/g, \"\")\n                return normalized.includes(search.normalize('NFD'))\n                    && (parts.length === 0 || parts.some(part => normalized.includes(',' + part + ',')))\n              })\n      })\n      .forEach(arr => filtered = filtered.concat(arr))\n\n    return filtered\n  }\n\n  render() {\n    const vocabHeadings = [LEMMA, CHAPTER, PART, GLOSS]\n    const columnWidths = [50, 120, 30, 100, 500]\n\n    return (\n      <div>\n        <Alert variant='light' style={{ textAlign: 'left', borderColor: 'lightgrey' }}>\n          <h5>(1) vocab</h5>\n          <Row className=\"me-1\">\n            <Col>\n              <Form onSubmit={(e) => this.addAll(e.target[0].value, e)}>\n                <InputGroup size=\"sm\">\n                  <Form.Control\n                    type=\"text\"\n                    id=\"wat\"\n                    aria-label=\"chapter restrictions (e.g. 2 or 2,3 or 2-4)\"\n                    aria-describedby=\"basic-addon1\"\n                    placeholder='try \"ch7-9\" or \"πας\"'\n                    onChange={(e) => this.search(e.target.value, e)} />\n                  <Button\n                    disabled={this.state.display.length <= 0}\n                    size=\"sm\"\n                    type=\"submit\">Add All ({this.state.display.length})</Button>\n                </InputGroup>\n              </Form>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <InputGroup size=\"sm\">\n                <ToggleButtonGroup type=\"checkbox\" size=\"sm\">\n                  <ToggleButton \n                    variant=\"outline-secondary\" \n                    value=\"nouns\" \n                    id=\"nouns-filter\" \n                    style={{ lineHeight: 1, fontSize: '.75em', width: '4em' }}\n                    onClick={(e) => this.togglePart(NOUN, e)}>\n                    noun\n                  </ToggleButton>\n                  <ToggleButton \n                    variant=\"outline-secondary\" \n                    value=\"verbs\" \n                    id=\"verbs-filter\" \n                    style={{ lineHeight: 1, fontSize: '.75em', width: '4em' }}\n                    onClick={(e) => this.togglePart(VERB, e)}>\n                    verb\n                  </ToggleButton>\n                  <ToggleButton \n                    variant=\"outline-secondary\" \n                    value=\"adjectives\" \n                    id=\"adjectives-filter\" \n                    style={{ lineHeight: 1, fontSize: '.75em', width: '4em' }}\n                    onClick={(e) => this.togglePart(ADJECTIVE, e)}>\n                    adj.\n                  </ToggleButton>\n                  <ToggleButton \n                    variant=\"outline-secondary\" \n                    value=\"prepositions\" \n                    id=\"prepositions-filter\" \n                    style={{ lineHeight: 1, fontSize: '.75em', width: '4em' }}\n                    onClick={(e) => this.togglePart(PREPOSITION, e)}>\n                    prep.\n                  </ToggleButton>\n                  <ToggleButton \n                    variant=\"outline-secondary\" \n                    value=\"pronouns\" \n                    id=\"pronouns-filter\" \n                    style={{ lineHeight: 1, fontSize: '.75em', width: '4em' }}\n                    onClick={(e) => this.togglePart(PRONOUN, e)}>\n                    pron.\n                  </ToggleButton>\n                  <ToggleButton \n                    variant=\"outline-secondary\" \n                    value=\"adverb\" \n                    id=\"adverbs-filter\" \n                    style={{ lineHeight: 1, fontSize: '.75em', width: '4em' }}\n                    onClick={(e) => this.togglePart(ADVERB, e)}>\n                    adv.\n                  </ToggleButton>\n                  <ToggleButton \n                    variant=\"outline-secondary\" \n                    value=\"conjunctions\" \n                    id=\"conjunctions-filter\" \n                    style={{ lineHeight: 1, fontSize: '.75em', width: '4em' }}\n                    onClick={(e) => this.togglePart(CONJUNCTION, e)}>\n                    conj.\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </InputGroup>\n            </Col>\n          </Row>\n          <Row className=\"mt-3\">\n            <Col>\n              <VariableSizeGrid\n                height={480}\n                width={480}\n                columnCount={5}\n                columnWidth={index => columnWidths[index]}\n                rowCount={this.state.display.length}\n                rowHeight={index => 30}>\n                {({ columnIndex, rowIndex, style }) => (\n                  <div style={Object.assign({}, style, { textAlign: 'left' })}>\n                    {columnIndex === 0\n                      ? <ToggleButton\n                          className=\"ms-2\"\n                          id={rowIndex}\n                          type=\"checkbox\"\n                          value={rowIndex}\n                          variant=\"outline-primary\"\n                          checked={this.state.selected.includes(this.state.display[rowIndex])}\n                          onClick={ () => this.onSelect(\n                              this.state.display[rowIndex][LEMMA], \n                              [this.state.display[rowIndex]],\n                              'toggle') }\n                          style={{ lineHeight: 1, \n                                   fontSize: '.75em', \n                                   padding: '.35em .65em',\n                                   fontWeight: 700 }}>\n                          +\n                        </ToggleButton>\n                      : this.state.display[rowIndex][vocabHeadings[columnIndex - 1]]\n                    }\n                  </div>\n                )}\n              </VariableSizeGrid>\n            </Col>\n          </Row>\n          {/*\n          <div>\n            <hr />\n          </div>\n          <div>\n          * chapters 1-30 cover S.M. Baugh's \"A Greek Primer\"\n          </div>\n          <div>\n          * chapters  31-42 cover S.M. Baugh's \"First John Reader\"\n          </div>\n          <div>\n          * so-called \"chapters\" beyond that are just...\n          </div>\n          */}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default VocabSelect;\n","import './App.css';\nimport React from 'react'\n\nimport Alert from 'react-bootstrap/Alert'\nimport Badge from 'react-bootstrap/Badge'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport Col from 'react-bootstrap/Col'\nimport Collapse from 'react-bootstrap/Collapse'\nimport Container from 'react-bootstrap/Container'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nimport Data from './backend/Data.js'\nimport Engine from './backend/Engine.js'\nimport VocabSelect from './VocabSelect.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { saveAs } from 'file-saver';\n\n\nimport {ALL, ADVERB_TYPE, RESULT, LEMMA, CASE, GENDER, NUMBER, MOOD, PERSON, TENSE, VOICE, CHAPTER, GLOSS, REFERENCE, ENGLISH, GREEK} from './backend/Filters.js'\nimport {PART, NOUN, VERB, ADJECTIVE, PREPOSITION, PRONOUN, ADVERB, CONJUNCTION } from './backend/Filters.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      records: [],\n      display: [],\n      filters: {},\n      fields: [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER],\n      limit: 10,\n      flashcardFields: [RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, ENGLISH],\n      flashcards: [],\n      flashcardsPreview: [],\n\n      showVocab: true,\n      selected: {},   // map of (criteria -> array of vocab rows)\n    };\n\n    this.vocab = []\n\n    this.toggleFilter = this.toggleFilter.bind(this)\n    this.updateFields = this.updateFields.bind(this)\n    this.updateFlashcardFields = this.updateFlashcardFields.bind(this)\n    this.updateRecords = this.updateRecords.bind(this)\n    this.toggleSelect = this.toggleSelect.bind(this)\n    this.downloadRecords = this.downloadRecords.bind(this)\n    this.getSelected = this.getSelected.bind(this)\n  }\n\n  static fields = \n    [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER, ADVERB_TYPE, REFERENCE, ENGLISH, GREEK]\n  static flashcardFields =\n    [RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, ENGLISH]\n\n  componentDidMount() {\n    Data.loadData().then((vocab) => { this.vocab = vocab })\n  }\n\n  toggleFilter(type, value) {\n    this.setState((state, props) => {\n      let currFilters = state.filters[type] || []\n      let newFilters = currFilters.slice()\n\n      if (currFilters.includes(value)) {\n        newFilters.splice(newFilters.indexOf(value), 1)\n      } else {\n        newFilters.push(value)\n      }\n\n      return { filters: Object.assign({}, state.filters, { [type]: newFilters }) }\n    })\n    // TODO: refresh here?\n  }\n\n  toggleSelect(display, rows, mode) {\n    if (mode === 'toggle') {\n      mode = (Object.keys(this.state.selected).some(disp => disp === display))\n        ? 'remove'\n        : 'add'\n    }\n\n    if (mode === 'add') {\n      this.setState((state, props) => {\n        return {\n          selected: Object.assign({}, state.selected, { [display]: rows })\n        }\n      })\n    }\n\n    if (mode === 'remove') {\n      let select = Object.assign({}, this.state.selected)\n      delete select[display]\n      this.setState((state, props) => {\n        return { selected: select }\n      })\n    }\n  }\n\n  updateFields(value) { this.setState((state, props) => {\n      let fields = (state.fields || []).slice()\n      if (fields.includes(value)) {\n        fields.splice(fields.indexOf(value), 1)\n      } else {\n        fields.push(value)\n      }\n\n      return { fields: fields }\n    })\n  }\n\n  updateFlashcardFields(value) {\n    this.setState((state, props) => {\n      let flashcardFields = (state.flashcardFields || []).slice()\n      if (flashcardFields.includes(value)) {\n        flashcardFields.splice(flashcardFields.indexOf(value), 1)\n      } else {\n        flashcardFields.push(value)\n      }\n\n      return { flashcardFields: flashcardFields }\n    })\n  }\n\n  updateRecords() {\n    let filters = Object.assign({}, this.state.filters)\n\n    var vocab = []\n    Object.values(this.state.selected)\n      .forEach(arr => vocab = vocab.concat(arr))\n    filters[LEMMA] = vocab.map(row => row[LEMMA])\n\n    Engine.getTranslations(filters)\n    let records = Engine.getRecords(filters)\n    let flashcards = Engine.getFlashcards(filters, this.state.flashcardFields)\n    const index = Math.floor(Math.random() * records.length - this.state.limit)\n    const flashcardsIndex = flashcards.length > this.state.limit\n      ?  Math.floor(Math.random() * (flashcards.length - this.state.limit))\n      : 0\n\n    this.setState(\n    { \n      records: records,\n      display: records.slice(index, index + this.state.limit),\n      flashcards: flashcards,\n      flashcardsPreview: flashcards.slice(flashcardsIndex, flashcardsIndex + this.state.limit),\n    })\n  }\n\n  downloadRecords() {\n    var text = this.state.flashcards.map(row => row[0] + '\\t' + row[1]).join('\\n')\n    var blob = new Blob([ text ], { type: \"text/plain;charset=utf-8\" })\n\n    var outputFilename = new Date().toLocaleString('en-US', { hour12: false }).replaceAll('/', '.').replaceAll(':', '∶').replace(', ', '_') + '_flashcards_'\n    if (this.state.selected !== null) {\n      outputFilename += Object.keys(this.state.selected).join()\n    }\n    if (Object.values(this.state.filters).some(filterSet => filterSet.length > 0)) {\n      outputFilename += '_'\n      outputFilename += Object.values(this.state.filters).map(filterSet => filterSet.join(',')).join('_')\n    }\n    if (outputFilename.length > 100) {\n      outputFilename = outputFilename.substr(0, 100) + '...(full name cut off)'\n    }\n    outputFilename += '.tsv'\n    saveAs(blob, outputFilename)\n  }\n\n  getSelected() {\n    var flattened = []\n    Object.values(this.state.selected)\n      .forEach(arr => flattened = flattened.concat(arr))\n    return flattened\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p></p>\n        </header>\n        <Container fluid>\n          {/*\n          <Row>\n            <Col sm=\"auto\" md=\"auto\" lg=\"auto\" xl=\"auto\" xxl=\"auto\">\n              <ToggleButton \n                id=\"show-vocab\"\n                value=\"show-vocab\"\n                type=\"checkbox\"\n                variant=\"outline-primary\"\n                size=\"sm\"\n                checked={this.state.showVocab}\n                onClick={() => this.setState({ showVocab: !this.state.showVocab })}>\n                >\n              </ToggleButton>\n            </Col>\n          </Row>\n          */}\n          <Row className=\"mt-3\">\n            <Col sm=\"6\" md=\"6\" lg=\"6\" xl=\"6\" xxl=\"6\" className=\"pe-0\">\n              <Collapse in={this.state.showVocab} dimension=\"width\">\n                <div>\n                  <VocabSelect\n                    selected={this.getSelected()}\n                    onSelect={this.toggleSelect}/>\n                </div>\n              </Collapse>\n            </Col>\n            <Col className=\"ps-0\" sm=\"9\" md=\"9\" lg=\"9\" xl=\"9\" xxl=\"9\">\n              <Alert variant=\"success\" style={{ textAlign: 'left' }}>\n                <Row>\n                  <h5>(1) I want to study...</h5>\n                  <Row>\n                    <Col>\n                      {Object.keys(this.state.selected).map(display => (\n                          <Badge pill\n                            key={display}\n                            className='me-1'\n                            bg=\"primary\"\n                            as=\"button\" \n                            style={{ borderWidth: 'thin' }}\n                            onClick={() => this.toggleSelect(display, [], 'remove')}>\n                            {display}\n                          </Badge>\n                        ))\n                      }\n                    </Col>\n                  </Row>\n                </Row>\n                <Row style={{ marginTop: '1rem' }}>\n                  <h5>(2) ...with filters...</h5>\n                {/* filter selection */}\n                  <ButtonToolbar style={{justifyContent: 'space-between'}}>\n                    <ToggleButtonGroup\n                      id='Gender'\n                      key='Gender'\n                      type='checkbox'\n                      size='sm'>\n                        <ToggleButton \n                          key='feminine'\n                          id='feminine'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='feminine'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Gender', 'feminine', e)}>\n                          fem.\n                        </ToggleButton>\n                        <ToggleButton \n                          key='masculine'\n                          id='masculine'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='masculine'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Gender', 'masculine', e)}>\n                          mas.\n                        </ToggleButton>\n                        <ToggleButton \n                          key='neuter'\n                          id='neuter'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='neuter'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Gender', 'neuter', e)}>\n                          neu.\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                    <ToggleButtonGroup\n                      id='Case'\n                      key='Case'\n                      type='checkbox'\n                      size='sm'>\n                        <ToggleButton \n                          key='nominative'\n                          id='nominative'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='nominative'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Case', 'nominative', e)}>\n                          nom.\n                        </ToggleButton>\n                        <ToggleButton \n                          key='genitive'\n                          id='genitive'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='genitive'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Case', 'genitive', e)}>\n                          gen.\n                        </ToggleButton>\n                        <ToggleButton \n                          key='dative'\n                          id='dative'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='dative'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Case', 'dative', e)}>\n                          dat.\n                        </ToggleButton>\n                        <ToggleButton \n                          key='accusative'\n                          id='accusative'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='accusative'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Case', 'accusative', e)}>\n                          acc.\n                        </ToggleButton>\n                        <ToggleButton \n                          key='vocative'\n                          id='vocative'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='vocative'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Case', 'vocative', e)}>\n                          voc.\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                    <ToggleButtonGroup\n                      id='Person'\n                      key='Person'\n                      type='checkbox'\n                      size='sm'>\n                        <ToggleButton \n                          key='first person'\n                          id='first person'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='first person'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Person', 'first person', e)}>\n                          1p\n                        </ToggleButton>\n                        <ToggleButton \n                          key='second person'\n                          id='second person'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='second person'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Person', 'second person', e)}>\n                          2p\n                        </ToggleButton>\n                        <ToggleButton \n                          key='third person'\n                          id='third person'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='third person'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Person', 'third person', e)}>\n                          3p\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                    <ToggleButtonGroup\n                      id='Number'\n                      key='Number'\n                      type='checkbox'\n                      size='sm'>\n                        <ToggleButton \n                          key='singular'\n                          id='singular'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='singular'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Number', 'singular', e)}>\n                          sg.\n                        </ToggleButton>\n                        <ToggleButton \n                          key='pl.'\n                          id='pl.'\n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value='pl.'\n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter('Number', 'pl.', e)}>\n                          pl.\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                  </ButtonToolbar>\n\n                  <ButtonToolbar style={{justifyContent: 'space-between'}}>\n                  {Object.keys(ALL)\n                    .filter(field => field !== PART)\n                    .map(filterType => (\n                    <ToggleButtonGroup id={filterType} key={filterType} type=\"checkbox\" size=\"sm\" >\n                      {ALL[filterType].map(filterValue => (\n                        <ToggleButton \n                          key={filterValue} \n                          id={filterValue} \n                          style={{ lineHeight: 1, fontSize: '.75em' }}\n                          value={filterValue} \n                          variant='outline-success' \n                          onClick={(e) => this.toggleFilter(filterType, filterValue, e)}>\n                          {filterValue}\n                        </ToggleButton>\n                      ))}\n                    </ToggleButtonGroup>\n                  ))}\n                  </ButtonToolbar>\n                </Row>\n              </Alert>\n              {/*\n              <Alert variant=\"dark\" style={{ textAlign: 'left' }}>\n              </Alert>\n              */}\n              <Alert variant=\"danger\" style={{ textAlign: 'left' }}>\n                <h5>(3) ...adjust flashcard fields...</h5>\n                <Row>\n                  <ButtonGroup defaultValue={this.state.flashcardFields} size=\"sm\">\n                    {App.flashcardFields.map(field => (\n                      <Button key={field} id={field} value={field} active={this.state.flashcardFields.includes(field)} variant='outline-secondary' onClick={(e) => this.updateFlashcardFields(field, e)}>\n                        {field}\n                      </Button>\n                    ))\n                    }\n                  </ButtonGroup>\n                </Row>\n              </Alert>\n              <Alert variant=\"info\" style={{ textAlign: 'left' }}>\n                  <Row>\n                    <Col>\n                      <h5>(4) ...preview!</h5>\n                    </Col>\n                    {/* refresh! */}\n                    <Col style={{ textAlign: 'right' }}>\n                      <Button onClick={this.updateRecords} variant=\"primary\">\n                        Refresh!\n                      </Button>\n                      <Button onClick={this.updateRecords} variant=\"primary\">\n                        Generate Translation Exercises\n                      </Button>\n                      <Button onClick={this.updateRecords} variant=\"primary\">\n                        Flip\n                      </Button>\n                    </Col>\n                  </Row>\n                  {/* preview dataset */}\n                  <Row>\n                    <Table responsive striped bordered hover size=\"sm\">\n                      <thead>\n                        <tr>\n                          <th key='front' style={{whiteSpace: 'nowrap'}}>Front</th>\n                          <th key='back' style={{whiteSpace: 'nowrap'}}>Back</th>\n                          {/*\n                          {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                              <th key={field} style={{whiteSpace: 'nowrap'}}>{field}</th>\n                          ))}\n                          */}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {\n                          this.state.flashcardsPreview.map(row => (\n                            <tr key={'tr-' + row[0] + row[1]}>\n                              <td key='front' style={{whiteSpace: 'nowrap'}}>{row[0]}</td>\n                              <td key='back' style={{whiteSpace: 'nowrap'}}>{row[1]}</td>\n                              {/*\n                              {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                                <td key={field} style={{whiteSpace: 'nowrap'}}>{record[field]}</td>\n                              ))}\n                              */}\n                            </tr>\n                          ))\n                        }\n                      </tbody>\n                    </Table>\n                  </Row>\n              </Alert>\n              {/* header section */}\n              <Alert variant=\"secondary\" style={{ textAlign: 'left' }}>\n                <h5>(5) Download flashcards</h5>\n                <Row>\n                  <Col>\n                    <Button onClick={this.downloadRecords}>\n                      Download Set ({this.state.flashcards.length} flashcards)\n                    </Button>\n                  </Col>\n                </Row>\n              </Alert>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}