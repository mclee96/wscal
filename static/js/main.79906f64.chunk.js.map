{"version":3,"sources":["backend/morphs.tsv","backend/esv.tsv","backend/na28.tsv","backend/vocab.tsv","backend/Filters.js","backend/Data.js","App.js","reportWebVitals.js","index.js"],"names":["CASE","GENDER","NUMBER","MOOD","PARTICIPLE","PART","ADJECTIVE","NOUN","PRONOUN","VERB","PERSON","TENSE","VOICE","CHAPTER","GLOSS","LEMMA","RESULT","ESV","NA28","REFERENCE","ALL","Papa","require","Data","callback","Object","keys","localStorage","some","key","includes","clear","vocab","length","loadFile","vocabFilepath","contents","rows","parse","delimiter","header","data","forEach","row","push","morphs","morphFilepath","esv","esvFilepath","na28","na28Filepath","id","filepath","getItem","setItem","req","XMLHttpRequest","addEventListener","e","responseText","trim","open","send","filters","filter","field","every","map","references","split","reference","Math","floor","random","assign","validFields","values","getRecords","fields","reduce","l","r","groupby","join","arr","chapters","App","props","state","records","display","showOffcanvas","limit","flashcardFields","flashcards","flashcardsPreview","getVocab","toggleFilter","bind","updateFields","updateFlashcardFields","updateRecords","updateChapter","setOffcanvas","downloadRecords","loadData","setState","type","value","this","currFilters","newFilters","slice","splice","indexOf","event","target","specific","allNumbers","replaceAll","chapter","range","i","parseInt","toString","isNaN","apply","getFlashcards","index","flashcardsIndex","text","blob","Blob","outputFilename","Date","toLocaleString","hour12","replace","filterSet","substr","saveAs","className","Container","Alert","variant","style","textAlign","Row","InputGroup","size","Button","onClick","Form","Control","placeholder","onChange","ToggleButtonGroup","ToggleButton","marginTop","ButtonToolbar","justifyContent","filterType","filterValue","ButtonGroup","defaultValue","active","Col","Table","responsive","striped","bordered","hover","whiteSpace","Offcanvas","show","onHide","placement","scoll","Header","closeButton","Title","Body","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79906f64.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/morphs.6539b917.tsv\";","export default __webpack_public_path__ + \"static/media/esv.fe2ed14b.tsv\";","export default __webpack_public_path__ + \"static/media/na28.19940234.tsv\";","export default __webpack_public_path__ + \"static/media/vocab.238ff455.tsv\";","// case\nexport const CASE = \"Case\" \nexport const NOMINATIVE = \"nominative\"\nexport const GENITIVE = \"genitive\"\nexport const DATIVE = \"dative\"\nexport const ACCUSATIVE = \"accusative\"\nexport const VOCATIVE = \"vocative\"\n\n// gender\nexport const GENDER = \"Gender\";\nexport const FEMININE = \"feminine\"\nexport const MASCULINE = \"masculine\"\nexport const NEUTER = \"neuter\"\n\n// number\nexport const NUMBER = \"Number\"\nexport const SINGULAR = \"singular\"\nexport const PLURAL = \"plural\"\n\n// mood\nexport const MOOD = \"Mood\"\nexport const INDICATIVE = \"indicative\"\nexport const IMPERATIVE = \"imperative\"\nexport const INFINITIVE = \"infinitive\"\nexport const SUBJUNCTIVE = \"subjunctive\"\nexport const PARTICIPLE = \"participle\"\n\n// part of speech\nexport const PART = \"Part\"\nexport const ADJECTIVE = \"adjective\"\nexport const ADVERB = \"adverb\"\nexport const CONJUNCTION = \"conjunction\"\nexport const NOUN = \"noun\"\nexport const PREPOSITION = \"preposition\"\nexport const PRONOUN = \"pronoun\"\nexport const VERB = \"verb\"\n\n// person\nexport const PERSON = \"Person\"\nexport const FIRST = \"first person\"\nexport const SECOND = \"second person\"\nexport const THIRD = \"third person\"\n\n// tense\nexport const TENSE = \"Tense\"\nexport const AORIST = \"aorist\"\nexport const PERFECT = \"perfect\"\nexport const PRESENT = \"present\"\nexport const FUTURE = \"future\"\nexport const IMPERFECT = \"imperfect\"\n\n// voice\nexport const VOICE = \"Voice\"\nexport const MIDDLE = \"middle\"\nexport const PASSIVE = \"passive\"\nexport const ACTIVE = \"active\"\n\n// other headers\nexport const CHAPTER = \"Chapter\";\nexport const GLOSS = \"Gloss\";\nexport const LEMMA = \"Lemma\";\nexport const RESULT = \"Result\"\nexport const TEXT = \"Text\"\nexport const ADVERB_TYPE = \"Adverb/particle Type\"\n\n// bibles\nexport const ESV = \"Esv\"\nexport const NA28 = \"Na28\"\nexport const ABBR = \"Abbr\"\nexport const REFERENCE = \"Reference\"\n\nexport const ALL = {\n  [PART]: [ADJECTIVE, NOUN, VERB, PRONOUN],\n  [GENDER]: [FEMININE, MASCULINE, NEUTER],\n  [CASE]: [NOMINATIVE, GENITIVE, DATIVE, ACCUSATIVE, VOCATIVE],\n  [TENSE]: [PRESENT, IMPERFECT, FUTURE, AORIST, PERFECT],\n  [VOICE]: [ACTIVE, MIDDLE, PASSIVE],\n  [NUMBER]: [SINGULAR, PLURAL],\n  [MOOD]: [INDICATIVE, IMPERATIVE, INFINITIVE, SUBJUNCTIVE, PARTICIPLE]\n}\n\nexport default ALL\n","import morphFilepath from './morphs.tsv'\nimport esvFilepath from './esv.tsv'\nimport na28Filepath from './na28.tsv'\nimport vocabFilepath from './vocab.tsv'\n\nimport { ABBR, CHAPTER, ESV, PART, RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, NA28, REFERENCE, TEXT, PARTICIPLE } from './Filters.js'\n\nconst Papa = require('papaparse');\n\nclass Data {\n  static vocab = []\n  static morphs = []\n  static esv = {}\n  static na28 = {}\n\n  // idempotent\n  static loadData(callback) {\n    // legacy reset\n    if (Object.keys(localStorage).some(key => key.includes('/wscal/static/media'))) {\n      localStorage.clear()\n    }\n\n    if (Data.vocab.length === 0) {\n      Data.loadFile('vocab', vocabFilepath, (contents) => {\n        let rows = []\n        Papa.parse(contents, { delimiter: '\\t', header: true }).data\n          .forEach(row => rows.push(row))\n        Data.vocab = rows\n      })\n    }\n\n    if (Data.morphs.length === 0) {\n      Data.loadFile('morphs', morphFilepath, (contents) => {\n          let rows = []\n          Papa.parse(contents, { delimiter: '\\t', header: true }).data\n            .forEach(row => rows.push(row))\n          Data.morphs = rows\n      })\n    }\n\n    if (Object.keys(Data.esv).length === 0) {\n      Data.loadFile('esv', esvFilepath, (contents) => {\n        Papa.parse(contents, { delimiter: '\\t', header: true }).data\n          .forEach(row => Data.esv[row[ABBR]] = row[TEXT])\n      })\n    }\n\n    if (Object.keys(Data.na28).length === 0) {\n      Data.loadFile('na28', na28Filepath, (contents) => {\n        Papa.parse(contents, { delimiter: '\\t', header: true }).data\n          .forEach(row => Data.na28[row[ABBR]] = row[TEXT])\n      })\n    }\n  }\n\n  static loadFile(id, filepath, callback) {\n    if (localStorage.getItem(id) != null && localStorage.getItem(id + '_filepath') === filepath) {\n      // cached result\n      if (callback) {\n        callback(localStorage.getItem(id))\n      }\n    } else {\n      localStorage.setItem(id + '_filepath', filepath)\n      let req = new XMLHttpRequest();\n      req.addEventListener(\"load\", (e) => {\n        localStorage.setItem(id, req.responseText.trim())\n        if (callback) {\n          callback(req.responseText.trim())\n        }\n      })\n      req.open(\"GET\", filepath);\n      req.send();\n    }\n  }\n\n  static getRecords(filters) {\n    return Data.morphs\n      .filter(row => Object.keys(filters)\n          .filter(field => filters[field].length !== 0)\n          .every(field => row[field] === '-' || filters[field].includes(row[field])))\n      .filter(row => row[CHAPTER] !== '-')\n      .map(row => {\n        let references = row[REFERENCE].split(',')\n        let reference = references[Math.floor((Math.random() * references.length))]\n        return Object.assign(\n            {}, \n            row, \n            { \n              [REFERENCE]: reference,\n              [ESV]: Data.esv[reference],\n              [NA28]: Data.na28[reference],\n            })\n      })\n  }\n\n  static getFlashcards(filters, validFields) {\n    return Object.values(\n        Data.getRecords(filters)\n          .map(row => {\n            var fields;\n            switch (row[PART]) {\n              case \"noun\":\n                fields = [ RESULT, LEMMA, GLOSS, GENDER, CASE, NUMBER, ESV ]; break;\n              case \"verb\":\n                fields = (row[MOOD] === PARTICIPLE)\n                  ? [ RESULT, LEMMA, GLOSS, TENSE, VOICE, MOOD, GENDER, CASE, NUMBER, ESV ]\n                  : [ RESULT, LEMMA, GLOSS, TENSE, VOICE, MOOD, PERSON, NUMBER, ESV ]; \n                break;\n              case \"adjective\":\n                fields = [ RESULT, LEMMA, GLOSS, GENDER, CASE, NUMBER, ESV ]; break;\n              case \"conjunction\":\n              case \"preposition, adverb\":\n              case \"preposition\":\n                fields = [ RESULT, LEMMA, GLOSS, ESV ]; break;\n              case \"pronoun\":\n              case \"pronoun, adjective\":\n              case \"adjective, pronoun\":\n                fields = [ RESULT, LEMMA, GLOSS, GENDER, CASE, PERSON, NUMBER, ESV ]; break;\n              default:\n                fields = [ RESULT ]; break;\n            }\n            return [row, fields.filter(field => validFields.includes(field))]\n          })\n          .reduce((l, r) => {\n            let groupby = r[1].filter(field => field !== ESV).map(field => r[0][field]).join()\n            l[groupby] = (l[groupby] || r)\n            return l\n          }, {}))\n          .map(arr => {\n            let row = arr[0]\n            let fields = arr[1]\n\n            let front = row[RESULT]\n            let back = fields\n              .map(field => {\n                if (field === GLOSS) {\n                  return '(\"' + row[GLOSS]+ '\")';\n                } else if (field === ESV) {\n                  return \"<> \" + row[REFERENCE] + \" \" + row[ESV]\n                } else {\n                  return row[field]\n                }\n              })\n              .join(\" \")\n            return [front, back]\n          })\n  }\n\n  static getVocab(chapters) {\n    if (chapters) {\n      return Data.vocab\n        .filter(row => chapters.includes(row[CHAPTER]))\n    } else {\n      return Data.vocab\n    }\n  }\n}\n\nexport default Data;\n","import './App.css';\nimport React from 'react'\n\nimport Alert from 'react-bootstrap/Alert'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Offcanvas from 'react-bootstrap/Offcanvas'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nimport Data from './backend/Data.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { saveAs } from 'file-saver';\n\n\nimport {ALL, ADVERB_TYPE, RESULT, LEMMA, CASE, GENDER, NUMBER, MOOD, PERSON, TENSE, VOICE, CHAPTER, GLOSS, REFERENCE, ESV, NA28} from './backend/Filters.js'\nimport {PART, NOUN, VERB, ADJECTIVE, PREPOSITION, PRONOUN, ADVERB, CONJUNCTION } from './backend/Filters.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      records: [],\n      display: [],\n      filters: {},\n      fields: [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER],\n      showOffcanvas: false,\n      limit: 10,\n      chapters: '',\n      flashcardFields: [RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, ESV],\n      flashcards: [],\n      flashcardsPreview: [],\n      vocab: Data.getVocab(),\n    };\n\n    this.toggleFilter = this.toggleFilter.bind(this)\n    this.updateFields = this.updateFields.bind(this)\n    this.updateFlashcardFields = this.updateFlashcardFields.bind(this)\n    this.updateRecords = this.updateRecords.bind(this)\n    this.updateChapter = this.updateChapter.bind(this)\n    this.setOffcanvas = this.setOffcanvas.bind(this)\n    this.downloadRecords = this.downloadRecords.bind(this)\n  }\n\n  static fields = \n    [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER, ADVERB_TYPE, REFERENCE, ESV, NA28]\n  static flashcardFields =\n    [RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, ESV]\n\n\n  componentDidMount() {\n    Data.loadData((records) => this.setState({ records: records }));\n  }\n\n  toggleFilter(type, value) {\n    this.setState((state, props) => {\n      let currFilters = state.filters[type] || []\n      let newFilters = currFilters.slice()\n\n      if (currFilters.includes(value)) {\n        newFilters.splice(newFilters.indexOf(value), 1)\n      } else {\n        newFilters.push(value)\n      }\n\n      return { filters: Object.assign({}, state.filters, { [type]: newFilters }) }\n    })\n    // TODO: refresh here?\n  }\n\n  updateChapter(event) {\n    this.setState({ chapters: event.target.value })\n  }\n\n  updateFields(value) {\n    this.setState((state, props) => {\n      let fields = (state.fields || []).slice()\n      if (fields.includes(value)) {\n        fields.splice(fields.indexOf(value), 1)\n      } else {\n        fields.push(value)\n      }\n\n      return { fields: fields }\n    })\n  }\n\n  updateFlashcardFields(value) {\n    this.setState((state, props) => {\n      let flashcardFields = (state.flashcardFields || []).slice()\n      if (flashcardFields.includes(value)) {\n        flashcardFields.splice(flashcardFields.indexOf(value), 1)\n      } else {\n        flashcardFields.push(value)\n      }\n\n      return { flashcardFields: flashcardFields }\n    })\n  }\n\n  updateRecords() {\n    let filters = Object.assign({}, this.state.filters)\n\n    let chapters = []\n    let specific = []\n    var allNumbers = true\n    this.state.chapters.replaceAll('ch', '').split(',')\n      .map(chapter => chapter.trim())\n      .forEach(chapter => {\n        if (chapter.includes('-')) {\n          let range = chapter.split('-')\n          for (var i = parseInt(range[0]); i < parseInt(range[1]) + 1; i++) {\n            chapters.push(i.toString())\n          }\n        } else if (!isNaN(chapter)) {\n          chapters.push(chapter)\n        } else {\n          allNumbers = false\n          specific.push(chapter)\n        }\n      })\n\n    if (allNumbers) {\n      filters[CHAPTER] = chapters\n      filters[LEMMA] = []\n    } else {\n      specific.push.apply(specific, \n          Data.getVocab(chapters)\n            .map(row => row[LEMMA]))\n      filters[CHAPTER] = []\n      filters[LEMMA] = specific\n    }\n\n    let records = Data.getRecords(filters)\n    let flashcards = Data.getFlashcards(filters, this.state.flashcardFields)\n    const index = Math.floor(Math.random() * records.length - this.state.limit)\n    const flashcardsIndex = flashcards.length > this.state.limit\n      ?  Math.floor(Math.random() * (flashcards.length - this.state.limit))\n      : 0\n\n    this.setState(\n    { \n      records: records,\n      display: records.slice(index, index + this.state.limit),\n      flashcards: flashcards,\n      flashcardsPreview: flashcards.slice(flashcardsIndex, flashcardsIndex + this.state.limit),\n    })\n  }\n\n  downloadRecords() {\n    var text = this.state.flashcards.map(row => row[0] + '\\t' + row[1]).join('\\n')\n    var blob = new Blob([ text ], { type: \"text/plain;charset=utf-8\" })\n\n    var outputFilename = new Date().toLocaleString('en-US', { hour12: false }).replaceAll('/', '.').replaceAll(':', '∶').replace(', ', '_') + '_flashcards_'\n    if (this.state.chapters !== null) {\n      outputFilename += this.state.chapters\n    }\n    if (Object.values(this.state.filters).some(filterSet => filterSet.length > 0)) {\n      outputFilename += '_'\n      outputFilename += Object.values(this.state.filters).map(filterSet => filterSet.join(',')).join('_')\n    }\n    if (outputFilename.length > 100) {\n      outputFilename = outputFilename.substr(0, 100) + '...(full name cut off)'\n    }\n    outputFilename += '.tsv'\n    saveAs(blob, outputFilename)\n  }\n\n  setOffcanvas(value) {\n    if (this.state.vocab.length > 0) {\n      this.setState({ showOffcanvas: value })\n    } else {\n      this.setState({ \n        showOffcanvas: value,\n        vocab: Data.getVocab()\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            \"SM Baugh A Greek Primer\"\n          </p>\n        </header>\n        <Container>\n          <Alert variant=\"success\" style={{ textAlign: 'left' }}>\n            <Row>\n              <h5>(1) I want to study...</h5>\n              <InputGroup size=\"sm\">\n                <Button variant=\"primary\" onClick={(e) => this.setOffcanvas(true, e)} className=\"me-2\">\n                  Browse Vocab\n                </Button>\n                <Form.Control\n                  aria-label=\"chapter restrictions (e.g. 2 or 2,3 or 2-4)\"\n                  aria-describedby=\"basic-addon1\"\n                  placeholder='e.g. \"ch2,10-11,πᾶς,εἰμί\". Leave blank for any chapter/word.'\n                  onChange={this.updateChapter}\n                />\n                <ToggleButtonGroup type=\"checkbox\" size=\"sm\">\n                  <ToggleButton variant=\"outline-secondary\" value=\"nouns\" id=\"nouns-filter\" onClick={(e) => this.toggleFilter(PART, NOUN, e)}>\n                    nouns\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"verbs\" id=\"verbs-filter\" onClick={(e) => this.toggleFilter(PART, VERB, e)}>\n                    verbs\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"adjectives\" id=\"adjectives-filter\" onClick={(e) => this.toggleFilter(PART, ADJECTIVE, e)}>\n                    adjectives\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"prepositions\" id=\"prepositions-filter\" onClick={(e) => this.toggleFilter(PART, PREPOSITION, e)}>\n                    preps\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"pronouns\" id=\"pronouns-filter\" onClick={(e) => this.toggleFilter(PART, PRONOUN, e)}>\n                    pronouns\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"adverb\" id=\"adverbs-filter\" onClick={(e) => this.toggleFilter(PART, ADVERB, e)}>\n                    adverbs\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"conjunctions\" id=\"conjunctions-filter\" onClick={(e) => this.toggleFilter(PART, CONJUNCTION, e)}>\n                    conjunctions\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </InputGroup>\n            </Row>\n            <Row style={{ marginTop: '1rem' }}>\n              <h5>(2) ...with filters...</h5>\n            {/* filter selection */}\n              <ButtonToolbar style={{justifyContent: 'space-between'}}>\n\n              {Object.keys(ALL)\n                .filter(field => field !== PART)\n                .map(filterType => (\n                <ToggleButtonGroup id={filterType} key={filterType} type=\"checkbox\" size=\"sm\" >\n                  {ALL[filterType].map(filterValue => (\n                    <ToggleButton key={filterValue} id={filterValue} value={filterValue} variant='outline-success' onClick={(e) => this.toggleFilter(filterType, filterValue, e)}>\n                      {filterValue}\n                    </ToggleButton>\n                  ))}\n                </ToggleButtonGroup>\n              ))}\n              </ButtonToolbar>\n            </Row>\n          </Alert>\n          {/*\n          <Alert variant=\"dark\" style={{ textAlign: 'left' }}>\n          </Alert>\n          */}\n          <Alert variant=\"danger\" style={{ textAlign: 'left' }}>\n            <h5>(3) ...adjust flashcard fields...</h5>\n            <Row>\n              <ButtonGroup defaultValue={this.state.flashcardFields} size=\"sm\">\n                {App.flashcardFields.map(field => (\n                  <Button key={field} id={field} value={field} active={this.state.flashcardFields.includes(field)} variant='outline-secondary' onClick={(e) => this.updateFlashcardFields(field, e)}>\n                    {field}\n                  </Button>\n                ))\n                }\n              </ButtonGroup>\n            </Row>\n          </Alert>\n          <Alert variant=\"info\" style={{ textAlign: 'left' }}>\n              <Row>\n                <Col>\n                  <h5>(4) ...preview!</h5>\n                </Col>\n                {/* refresh! */}\n                <Col style={{ textAlign: 'right' }}>\n                  <Button onClick={this.updateRecords} variant=\"primary\">\n                    Refresh!\n                  </Button>\n                </Col>\n              </Row>\n              {/* preview dataset */}\n              <Row>\n                <Table responsive striped bordered hover size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th key='front' style={{whiteSpace: 'nowrap'}}>Front</th>\n                      <th key='back' style={{whiteSpace: 'nowrap'}}>Back</th>\n                      {/*\n                      {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                          <th key={field} style={{whiteSpace: 'nowrap'}}>{field}</th>\n                      ))}\n                      */}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.flashcardsPreview.map(row => (\n                        <tr key={'tr-' + row[0] + row[1]}>\n                          <td key='front' style={{whiteSpace: 'nowrap'}}>{row[0]}</td>\n                          <td key='back' style={{whiteSpace: 'nowrap'}}>{row[1]}</td>\n                          {/*\n                          {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                            <td key={field} style={{whiteSpace: 'nowrap'}}>{record[field]}</td>\n                          ))}\n                          */}\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              </Row>\n          </Alert>\n          {/* header section */}\n          <Alert variant=\"secondary\" style={{ textAlign: 'left' }}>\n            <h5>(5) Download flashcards</h5>\n            <Row>\n              <Col>\n                <Button onClick={this.downloadRecords}>\n                  Download Set ({this.state.flashcards.length} flashcards)\n                </Button>\n              </Col>\n            </Row>\n          </Alert>\n          <Offcanvas show={this.state.showOffcanvas} onHide={(e) => this.setOffcanvas(false, e)} placement=\"start\" scoll=\"true\">\n            <Offcanvas.Header closeButton>\n              <Offcanvas.Title>Vocab</Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n              <Container>\n                <Table responsive striped bordered hover size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th key='lemma' style={{whiteSpace: 'nowrap'}}>Lemma</th>\n                      <th key='part' style={{whiteSpace: 'nowrap'}}>Part</th>\n                      <th key='chapter' style={{whiteSpace: 'nowrap'}}>Ch</th>\n                      <th key='gloss' style={{whiteSpace: 'nowrap'}}>Gloss</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.vocab.map(row => (\n                        <tr key={'tr-' + row[0] + row[1]}>\n                          <td key='lemma' style={{whiteSpace: 'nowrap'}}>{row[LEMMA]}</td>\n                          <td key='part' style={{whiteSpace: 'nowrap'}}>{row[PART]}</td>\n                          <td key='chapter' style={{whiteSpace: 'nowrap'}}>{row[CHAPTER]}</td>\n                          <td key='gloss' style={{whiteSpace: 'nowrap'}}>{row[GLOSS]}</td>\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              </Container>\n            </Offcanvas.Body>\n          </Offcanvas>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}