{"version":3,"sources":["backend/morphs.tsv","backend/esv.tsv","backend/na28.tsv","backend/vocab.tsv","backend/Filters.js","backend/Data.js","App.js","reportWebVitals.js","index.js"],"names":["CASE","GENDER","NUMBER","MOOD","PART","ADJECTIVE","NOUN","PRONOUN","VERB","PERSON","TENSE","VOICE","CHAPTER","GLOSS","LEMMA","RESULT","ESV","NA28","REFERENCE","ALL","Papa","require","Data","callback","vocab","length","loadFile","vocabFilepath","contents","rows","parse","trimEnd","delimiter","header","data","forEach","row","push","morphs","morphFilepath","Object","keys","esv","esvFilepath","na28","na28Filepath","filepath","localStorage","getItem","req","XMLHttpRequest","addEventListener","e","setItem","responseText","open","send","filters","filter","field","every","includes","map","references","split","reference","Math","floor","random","assign","validFields","values","getRecords","fields","reduce","l","r","groupby","join","arr","chapters","App","props","state","records","display","showOffcanvas","limit","flashcardFields","flashcards","flashcardsPreview","getVocab","toggleFilter","bind","updateFields","updateFlashcardFields","updateRecords","updateChapter","setOffcanvas","downloadRecords","loadData","setState","type","value","this","currFilters","newFilters","slice","splice","indexOf","event","target","specific","replaceAll","chapter","trim","range","i","parseInt","toString","isNaN","arg","apply","getFlashcards","index","flashcardsIndex","text","blob","Blob","saveAs","className","Container","Alert","variant","style","textAlign","Row","InputGroup","size","Button","onClick","Form","Control","placeholder","onChange","ToggleButtonGroup","ToggleButton","id","marginTop","ButtonToolbar","justifyContent","filterType","filterValue","ButtonGroup","defaultValue","active","Col","Table","responsive","striped","bordered","hover","whiteSpace","Offcanvas","show","onHide","placement","scoll","Header","closeButton","Title","Body","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8VAAe,MAA0B,mCCA1B,MAA0B,gCCA1B,MAA0B,iCCA1B,MAA0B,kCCC5BA,EAAO,OAQPC,EAAS,SAMTC,EAAS,SAKTC,EAAO,OAQPC,EAAO,OACPC,EAAY,YAGZC,EAAO,OAEPC,EAAU,UACVC,EAAO,OAGPC,EAAS,SAMTC,EAAQ,QAQRC,EAAQ,QAMRC,EAAU,UACVC,EAAQ,QACRC,EAAQ,QACRC,EAAS,SAKTC,EAAM,MACNC,EAAO,OAEPC,EAAY,YAEZC,GAAG,mBACbf,EAAO,CAACC,EAAWC,EAAME,EAAMD,IADlB,cAEbN,EAAS,CA/DY,WACC,YACH,WA2DN,cAGbD,EAAO,CAxEgB,aACF,WACF,SACI,aACF,aAiER,cAIbU,EAAQ,CA5BY,UAEE,YADH,SAHA,WA0BN,cAKbC,EAAQ,CArBW,SAFA,SACC,YAiBP,cAMbT,EAAS,CA7DY,WACF,WAsDN,cAObC,EAAO,CAzDgB,aACA,aACA,aACC,cACD,eA8CV,GChEViB,EAAOC,EAAQ,IAEfC,E,6FAOJ,SAAgBC,GACY,IAAtBD,EAAKE,MAAMC,QACbH,EAAKI,SAASC,GAAe,SAACC,GAC5B,IAAIC,EAAO,GACXT,EAAKU,MAAMF,EAASG,UAAW,CAAEC,UAAW,KAAMC,QAAQ,IAAQC,KAC/DC,SAAQ,SAAAC,GAAG,OAAIP,EAAKQ,KAAKD,MAC5Bd,EAAKE,MAAQK,KAIU,IAAvBP,EAAKgB,OAAOb,QACdH,EAAKI,SAASa,GAAe,SAACX,GAC1B,IAAIC,EAAO,GACXT,EAAKU,MAAMF,EAASG,UAAW,CAAEC,UAAW,KAAMC,QAAQ,IAAQC,KAC/DC,SAAQ,SAAAC,GAAG,OAAIP,EAAKQ,KAAKD,MAC5Bd,EAAKgB,OAAST,KAIiB,IAAjCW,OAAOC,KAAKnB,EAAKoB,KAAKjB,QACxBH,EAAKI,SAASiB,GAAa,SAACf,GAC1BR,EAAKU,MAAMF,EAASG,UAAW,CAAEC,UAAW,KAAMC,QAAQ,IAAQC,KAC/DC,SAAQ,SAAAC,GAAG,OAAId,EAAKoB,IAAIN,EAAG,MAAUA,EAAG,WAIT,IAAlCI,OAAOC,KAAKnB,EAAKsB,MAAMnB,QACzBH,EAAKI,SAASmB,GAAc,SAACjB,GAC3BR,EAAKU,MAAMF,EAASG,UAAW,CAAEC,UAAW,KAAMC,QAAQ,IAAQC,KAC/DC,SAAQ,SAAAC,GAAG,OAAId,EAAKsB,KAAKR,EAAG,MAAUA,EAAG,a,sBAKlD,SAAgBU,EAAUvB,GACxB,GAAsC,MAAlCwB,aAAaC,QAAQF,GACvBvB,EAASwB,aAAaC,QAAQF,QACzB,CACL,IAAIG,EAAM,IAAIC,eACdD,EAAIE,iBAAiB,QAAQ,SAACC,GAC5BL,aAAaM,QAAQP,EAAUG,EAAIK,cACnC/B,EAAS0B,EAAIK,iBAEfL,EAAIM,KAAK,MAAOT,GAChBG,EAAIO,U,wBAIR,SAAkBC,GAChB,OAAOnC,EAAKgB,OACToB,QAAO,SAAAtB,GAAG,OAAII,OAAOC,KAAKgB,GACtBC,QAAO,SAAAC,GAAK,OAA8B,IAA1BF,EAAQE,GAAOlC,UAC/BmC,OAAM,SAAAD,GAAK,MAAmB,MAAfvB,EAAIuB,IAAkBF,EAAQE,GAAOE,SAASzB,EAAIuB,UACrED,QAAO,SAAAtB,GAAG,MAAqB,MAAjBA,EAAG,WACjB0B,KAAI,SAAA1B,GAAQ,IAAD,EACN2B,EAAa3B,EAAG,UAAY4B,MAAM,KAClCC,EAAYF,EAAWG,KAAKC,MAAOD,KAAKE,SAAWL,EAAWtC,SAClE,OAAOe,OAAO6B,OACV,GACAjC,GAFG,KAAAI,OAAA,IAAAA,CAAA,EAIAtB,EAAY+C,GAJZzB,OAAA,IAAAA,CAAA,EAKAxB,EAAMM,EAAKoB,IAAIuB,IALfzB,OAAA,IAAAA,CAAA,EAMAvB,EAAOK,EAAKsB,KAAKqB,IANjB,S,2BAWb,SAAqBR,EAASa,GAC5B,OAAO9B,OAAO+B,OACVjD,EAAKkD,WAAWf,GACbK,KAAI,SAAA1B,GACH,IAAIqC,EACJ,OAAQrC,EAAG,MACT,IAAK,OACHqC,EAAS,CAAE1D,EAAQD,EAAOb,EAAQD,EAAME,EAAQW,EAAOG,GAAO,MAChE,IAAK,OACHyD,EAAS,CAAE1D,EAAQD,EAAOJ,EAAOC,EAAOR,EAAMM,EAAQP,EAAQW,EAAOG,GAAO,MAC9E,IAAK,YACHyD,EAAS,CAAE1D,EAAQD,EAAOb,EAAQD,EAAME,EAAQW,EAAOG,GAAO,MAChE,IAAK,cACL,IAAK,sBACL,IAAK,cACHyD,EAAS,CAAE1D,EAAQD,EAAOD,EAAOG,GAAO,MAC1C,IAAK,UACL,IAAK,qBACL,IAAK,qBACHyD,EAAS,CAAE1D,EAAQD,EAAOb,EAAQD,EAAMS,EAAQP,EAAQW,EAAOG,GAAO,MACxE,QACEyD,EAAS,CAAE1D,GAEf,MAAO,CAACqB,EAAKqC,EAAOf,QAAO,SAAAC,GAAK,OAAIW,EAAYT,SAASF,UAE1De,QAAO,SAACC,EAAGC,GACV,IAAIC,EAAUD,EAAE,GAAGlB,QAAO,SAAAC,GAAK,OAAIA,IAAU3C,KAAK8C,KAAI,SAAAH,GAAK,OAAIiB,EAAE,GAAGjB,MAAQmB,OAE5E,OADAH,EAAEE,GAAYF,EAAEE,IAAYD,EACrBD,IACN,KACFb,KAAI,SAAAiB,GACH,IAAI3C,EAAM2C,EAAI,GACVN,EAASM,EAAI,GAcjB,MAAO,CAZK3C,EAAG,OACJqC,EACRX,KAAI,SAAAH,GACH,OAAIA,IAAU9C,EACL,IAAMuB,EAAG,MAAU,IACjBuB,IAAU3C,EACZ,MAAQoB,EAAG,UAAc,IAAMA,EAAG,IAElCA,EAAIuB,MAGdmB,KAAK,W,sBAKlB,SAAgBE,GACd,OAAIA,EACK1D,EAAKE,MACTkC,QAAO,SAAAtB,GAAG,OAAI4C,EAASnB,SAASzB,EAAG,YAE/Bd,EAAKE,U,KAlIZF,EACGE,MAAQ,GADXF,EAEGgB,OAAS,GAFZhB,EAGGoB,IAAM,GAHTpB,EAIGsB,KAAO,GAmIDtB,Q,yBCrHT2D,G,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,QAAS,GACT5B,QAAS,GACTgB,OAAQ,CAAC1D,EAAQD,EAAOb,EAAQD,EAAMU,EAAOC,EAAOR,EAAMM,EAAQP,EAAQW,EAAOT,EAAMQ,GACvF0E,eAAe,EACfC,MAAO,GACPP,SAAU,GACVQ,gBAAiB,CAACzE,EAAQD,EAAOb,EAAQD,EAAME,EAAQW,EAAOH,EAAOC,EAAOR,EAAMM,EAAQO,GAC1FyE,WAAY,GACZC,kBAAmB,GACnBlE,MAAOF,EAAKqE,YAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAC7B,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBACrB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,aAAe,EAAKA,aAAaL,KAAlB,gBACpB,EAAKM,gBAAkB,EAAKA,gBAAgBN,KAArB,gBAtBN,E,qDA+BnB,WAAqB,IAAD,OAClBvE,EAAK8E,UAAS,SAAChB,GAAD,OAAa,EAAKiB,SAAS,CAAEjB,QAASA,S,0BAGtD,SAAakB,EAAMC,GACjBC,KAAKH,UAAS,SAAClB,EAAOD,GACpB,IAAIuB,EAActB,EAAM1B,QAAQ6C,IAAS,GACrCI,EAAaD,EAAYE,QAQ7B,OANIF,EAAY5C,SAAS0C,GACvBG,EAAWE,OAAOF,EAAWG,QAAQN,GAAQ,GAE7CG,EAAWrE,KAAKkE,GAGX,CAAE9C,QAASjB,OAAO6B,OAAO,GAAIc,EAAM1B,QAAxBjB,OAAA,IAAAA,CAAA,GAAoC8D,EAAOI,U,2BAKjE,SAAcI,GACZN,KAAKH,SAAS,CAAErB,SAAU8B,EAAMC,OAAOR,U,0BAGzC,SAAaA,GACXC,KAAKH,UAAS,SAAClB,EAAOD,GACpB,IAAIT,GAAUU,EAAMV,QAAU,IAAIkC,QAOlC,OANIlC,EAAOZ,SAAS0C,GAClB9B,EAAOmC,OAAOnC,EAAOoC,QAAQN,GAAQ,GAErC9B,EAAOpC,KAAKkE,GAGP,CAAE9B,OAAQA,Q,mCAIrB,SAAsB8B,GACpBC,KAAKH,UAAS,SAAClB,EAAOD,GACpB,IAAIM,GAAmBL,EAAMK,iBAAmB,IAAImB,QAOpD,OANInB,EAAgB3B,SAAS0C,GAC3Bf,EAAgBoB,OAAOpB,EAAgBqB,QAAQN,GAAQ,GAEvDf,EAAgBnD,KAAKkE,GAGhB,CAAEf,gBAAiBA,Q,2BAI9B,WACE,IAAI/B,EAAU+C,KAAKrB,MAAM1B,QAErBuB,EAAW,GACXgC,EAAW,GACfR,KAAKrB,MAAMH,SAASiC,WAAW,KAAM,IAAIjD,MAAM,KAC5CF,KAAI,SAAAoD,GAAO,OAAIA,EAAQC,UACvBhF,SAAQ,SAAA+E,GACP,GAAIA,EAAQrD,SAAS,KAEnB,IADA,IAAIuD,EAAQF,EAAQlD,MAAM,KACjBqD,EAAIC,SAASF,EAAM,IAAKC,EAAIC,SAASF,EAAM,IAAM,EAAGC,IAC3DrC,EAAS3C,KAAKgF,EAAEE,iBAERC,MAAMN,GAGhBF,EAAS3E,KAAK6E,GAFdlC,EAAS3C,KAAK6E,MAKHV,KAAKrB,MAAMH,SAASiC,WAAW,KAAM,IAAIjD,MAAM,KAC7DJ,OAAM,SAAA6D,GAAG,OAAKD,MAAMC,MAErBhE,EAAO,QAAYuB,GAEnBgC,EAAS3E,KAAKqF,MAAMV,EAChB1F,EAAKqE,SAASX,GACXlB,KAAI,SAAA1B,GAAG,OAAIA,EAAG,UACrBqB,EAAO,MAAUuD,GAGnB,IAAI5B,EAAU9D,EAAKkD,WAAWf,GAC1BgC,EAAanE,EAAKqG,cAAclE,EAAS+C,KAAKrB,MAAMK,iBAClDoC,EAAQ1D,KAAKC,MAAMD,KAAKE,SAAWgB,EAAQ3D,OAAS+E,KAAKrB,MAAMI,OAC/DsC,EAAkBpC,EAAWhE,OAAS+E,KAAKrB,MAAMI,MAClDrB,KAAKC,MAAMD,KAAKE,UAAYqB,EAAWhE,OAAS+E,KAAKrB,MAAMI,QAC5D,EAEJiB,KAAKH,SACL,CACEjB,QAASA,EACTC,QAASD,EAAQuB,MAAMiB,EAAOA,EAAQpB,KAAKrB,MAAMI,OACjDE,WAAYA,EACZC,kBAAmBD,EAAWkB,MAAMkB,EAAiBA,EAAkBrB,KAAKrB,MAAMI,W,6BAItF,WACE,IAAIuC,EAAOtB,KAAKrB,MAAMM,WAAW3B,KAAI,SAAA1B,GAAG,OAAIA,EAAI,GAAK,KAAOA,EAAI,MAAI0C,KAAK,MACrEiD,EAAO,IAAIC,KAAK,CAAEF,GAAQ,CAAExB,KAAM,6BACtC2B,kBAAOF,EAAM,e,0BAGf,SAAaxB,GACPC,KAAKrB,MAAM3D,MAAMC,OAAS,EAC5B+E,KAAKH,SAAS,CAAEf,cAAeiB,IAE/BC,KAAKH,SAAS,CACZf,cAAeiB,EACf/E,MAAOF,EAAKqE,e,oBAKlB,WAAU,IAAD,OACP,OACE,uBAAKuC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,SACE,6DAIF,gBAACC,EAAA,EAAD,WACE,gBAACC,EAAA,EAAD,CAAOC,QAAQ,UAAUC,MAAO,CAAEC,UAAW,QAA7C,UACE,gBAACC,EAAA,EAAD,WACE,yDACA,gBAACC,EAAA,EAAD,CAAYC,KAAK,KAAjB,UACE,eAACC,EAAA,EAAD,CAAQN,QAAQ,UAAUO,QAAS,SAACxF,GAAD,OAAO,EAAK8C,cAAa,EAAM9C,IAAI8E,UAAU,OAAhF,0BAGA,eAACW,EAAA,EAAKC,QAAN,CACE,aAAW,8CACX,mBAAiB,eACjBC,YAAY,kGACZC,SAAUxC,KAAKP,gBAEjB,gBAACgD,EAAA,EAAD,CAAmB3C,KAAK,WAAWoC,KAAK,KAAxC,UACE,eAACQ,EAAA,EAAD,CAAcb,QAAQ,oBAAoB9B,MAAM,QAAQ4C,GAAG,eAAeP,QAAS,SAACxF,GAAD,OAAO,EAAKwC,aAAaxF,EAAME,EAAM8C,IAAxH,mBAGA,eAAC8F,EAAA,EAAD,CAAcb,QAAQ,oBAAoB9B,MAAM,QAAQ4C,GAAG,eAAeP,QAAS,SAACxF,GAAD,OAAO,EAAKwC,aAAaxF,EAAMI,EAAM4C,IAAxH,mBAGA,eAAC8F,EAAA,EAAD,CAAcb,QAAQ,oBAAoB9B,MAAM,aAAa4C,GAAG,oBAAoBP,QAAS,SAACxF,GAAD,OAAO,EAAKwC,aAAaxF,EAAMC,EAAW+C,IAAvI,wBAGA,eAAC8F,EAAA,EAAD,CAAcb,QAAQ,oBAAoB9B,MAAM,eAAe4C,GAAG,sBAAsBP,QAAS,SAACxF,GAAD,OAAO,EAAKwC,aAAaxF,EF3KjH,cE2KoIgD,IAA7I,mBAGA,eAAC8F,EAAA,EAAD,CAAcb,QAAQ,oBAAoB9B,MAAM,WAAW4C,GAAG,kBAAkBP,QAAS,SAACxF,GAAD,OAAO,EAAKwC,aAAaxF,EAAMG,EAAS6C,IAAjI,sBAGA,eAAC8F,EAAA,EAAD,CAAcb,QAAQ,oBAAoB9B,MAAM,SAAS4C,GAAG,iBAAiBP,QAAS,SAACxF,GAAD,OAAO,EAAKwC,aAAaxF,EFpL3G,SEoLyHgD,IAA7H,qBAGA,eAAC8F,EAAA,EAAD,CAAcb,QAAQ,oBAAoB9B,MAAM,eAAe4C,GAAG,sBAAsBP,QAAS,SAACxF,GAAD,OAAO,EAAKwC,aAAaxF,EFtLjH,cEsLoIgD,IAA7I,mCAMN,gBAACoF,EAAA,EAAD,CAAKF,MAAO,CAAEc,UAAW,QAAzB,UACE,yDAEA,eAACC,EAAA,EAAD,CAAef,MAAO,CAACgB,eAAgB,iBAAvC,SAEC9G,OAAOC,KAAKtB,GACVuC,QAAO,SAAAC,GAAK,OAAIA,IAAUvD,KAC1B0D,KAAI,SAAAyF,GAAU,OACf,eAACN,EAAA,EAAD,CAAmBE,GAAII,EAA6BjD,KAAK,WAAWoC,KAAK,KAAzE,SACGvH,EAAIoI,GAAYzF,KAAI,SAAA0F,GAAW,OAC9B,eAACN,EAAA,EAAD,CAAgCC,GAAIK,EAAajD,MAAOiD,EAAanB,QAAQ,kBAAkBO,QAAS,SAACxF,GAAD,OAAO,EAAKwC,aAAa2D,EAAYC,EAAapG,IAA1J,SACGoG,GADgBA,OAFiBD,cAe9C,gBAACnB,EAAA,EAAD,CAAOC,QAAQ,SAASC,MAAO,CAAEC,UAAW,QAA5C,UACE,oEACA,eAACC,EAAA,EAAD,UACE,eAACiB,EAAA,EAAD,CAAaC,aAAclD,KAAKrB,MAAMK,gBAAiBkD,KAAK,KAA5D,SACGzD,EAAIO,gBAAgB1B,KAAI,SAAAH,GAAK,OAC5B,eAACgF,EAAA,EAAD,CAAoBQ,GAAIxF,EAAO4C,MAAO5C,EAAOgG,OAAQ,EAAKxE,MAAMK,gBAAgB3B,SAASF,GAAQ0E,QAAQ,oBAAoBO,QAAS,SAACxF,GAAD,OAAO,EAAK2C,sBAAsBpC,EAAOP,IAA/K,SACGO,GADUA,aAQrB,gBAACyE,EAAA,EAAD,CAAOC,QAAQ,OAAOC,MAAO,CAAEC,UAAW,QAA1C,UACI,gBAACC,EAAA,EAAD,WACE,eAACoB,EAAA,EAAD,UACE,oDAGF,eAACA,EAAA,EAAD,CAAKtB,MAAO,CAAEC,UAAW,SAAzB,SACE,eAACI,EAAA,EAAD,CAAQC,QAASpC,KAAKR,cAAeqC,QAAQ,UAA7C,2BAMJ,eAACG,EAAA,EAAD,UACE,gBAACqB,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACvB,KAAK,KAA9C,UACE,iCACE,gCACE,qBAAgBJ,MAAO,CAAC4B,WAAY,UAApC,kBAAQ,SACR,qBAAe5B,MAAO,CAAC4B,WAAY,UAAnC,iBAAQ,aAQZ,iCAEI1D,KAAKrB,MAAMO,kBAAkB5B,KAAI,SAAA1B,GAAG,OAClC,gCACE,qBAAgBkG,MAAO,CAAC4B,WAAY,UAApC,SAAgD9H,EAAI,IAA5C,SACR,qBAAekG,MAAO,CAAC4B,WAAY,UAAnC,SAA+C9H,EAAI,IAA3C,UAFD,MAAQA,EAAI,GAAKA,EAAI,iBAgB5C,gBAACgG,EAAA,EAAD,CAAOC,QAAQ,YAAYC,MAAO,CAAEC,UAAW,QAA/C,UACE,0DACA,eAACC,EAAA,EAAD,UACE,eAACoB,EAAA,EAAD,UACE,gBAACjB,EAAA,EAAD,CAAQC,QAASpC,KAAKL,gBAAtB,2BACiBK,KAAKrB,MAAMM,WAAWhE,OADvC,yBAMN,gBAAC0I,EAAA,EAAD,CAAWC,KAAM5D,KAAKrB,MAAMG,cAAe+E,OAAQ,SAACjH,GAAD,OAAO,EAAK8C,cAAa,EAAO9C,IAAIkH,UAAU,QAAQC,MAAM,OAA/G,UACE,eAACJ,EAAA,EAAUK,OAAX,CAAkBC,aAAW,EAA7B,SACE,eAACN,EAAA,EAAUO,MAAX,sBAEF,eAACP,EAAA,EAAUQ,KAAX,UACE,eAACxC,EAAA,EAAD,UACE,gBAAC0B,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACvB,KAAK,KAA9C,UACE,iCACE,gCACE,qBAAgBJ,MAAO,CAAC4B,WAAY,UAApC,kBAAQ,SACR,qBAAe5B,MAAO,CAAC4B,WAAY,UAAnC,iBAAQ,QACR,qBAAkB5B,MAAO,CAAC4B,WAAY,UAAtC,eAAQ,WACR,qBAAgB5B,MAAO,CAAC4B,WAAY,UAApC,kBAAQ,cAGZ,iCAEI1D,KAAKrB,MAAM3D,MAAMsC,KAAI,SAAA1B,GAAG,OACtB,gCACE,qBAAgBkG,MAAO,CAAC4B,WAAY,UAApC,SAAgD9H,EAAG,OAA3C,SACR,qBAAekG,MAAO,CAAC4B,WAAY,UAAnC,SAA+C9H,EAAG,MAA1C,QACR,qBAAkBkG,MAAO,CAAC4B,WAAY,UAAtC,SAAkD9H,EAAG,SAA7C,WACR,qBAAgBkG,MAAO,CAAC4B,WAAY,UAApC,SAAgD9H,EAAG,OAA3C,WAJD,MAAQA,EAAI,GAAKA,EAAI,6B,GA7SpCwI,IAAMC,WAAlB5F,GA0BGR,OACL,CAAC1D,EAAQD,EAAOb,EAAQD,EAAMU,EAAOC,EAAOR,EAAMM,EAAQP,EAAQW,EAAOT,EAAMQ,EFSxD,uBET8EM,EAAWF,EAAKC,GA3BnHgE,GA4BGO,gBACL,CAACzE,EAAQD,EAAOb,EAAQD,EAAME,EAAQW,EAAOH,EAAOC,EAAOR,EAAMM,EAAQO,GAmS9DiE,UC/UA6F,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.4817a91f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/morphs.17a65098.tsv\";","export default __webpack_public_path__ + \"static/media/esv.fe2ed14b.tsv\";","export default __webpack_public_path__ + \"static/media/na28.19940234.tsv\";","export default __webpack_public_path__ + \"static/media/vocab.238ff455.tsv\";","// case\nexport const CASE = \"Case\" \nexport const NOMINATIVE = \"nominative\"\nexport const GENITIVE = \"genitive\"\nexport const DATIVE = \"dative\"\nexport const ACCUSATIVE = \"accusative\"\nexport const VOCATIVE = \"vocative\"\n\n// gender\nexport const GENDER = \"Gender\";\nexport const FEMININE = \"feminine\"\nexport const MASCULINE = \"masculine\"\nexport const NEUTER = \"neuter\"\n\n// number\nexport const NUMBER = \"Number\"\nexport const SINGULAR = \"singular\"\nexport const PLURAL = \"plural\"\n\n// mood\nexport const MOOD = \"Mood\"\nexport const INDICATIVE = \"indicative\"\nexport const IMPERATIVE = \"imperative\"\nexport const INFINITIVE = \"infinitive\"\nexport const SUBJUNCTIVE = \"subjunctive\"\nexport const PARTICIPLE = \"participle\"\n\n// part of speech\nexport const PART = \"Part\"\nexport const ADJECTIVE = \"adjective\"\nexport const ADVERB = \"adverb\"\nexport const CONJUNCTION = \"conjunction\"\nexport const NOUN = \"noun\"\nexport const PREPOSITION = \"preposition\"\nexport const PRONOUN = \"pronoun\"\nexport const VERB = \"verb\"\n\n// person\nexport const PERSON = \"Person\"\nexport const FIRST = \"first person\"\nexport const SECOND = \"second person\"\nexport const THIRD = \"third person\"\n\n// tense\nexport const TENSE = \"Tense\"\nexport const AORIST = \"aorist\"\nexport const PERFECT = \"perfect\"\nexport const PRESENT = \"present\"\nexport const FUTURE = \"future\"\nexport const IMPERFECT = \"imperfect\"\n\n// voice\nexport const VOICE = \"Voice\"\nexport const MIDDLE = \"middle\"\nexport const PASSIVE = \"passive\"\nexport const ACTIVE = \"active\"\n\n// other headers\nexport const CHAPTER = \"Chapter\";\nexport const GLOSS = \"Gloss\";\nexport const LEMMA = \"Lemma\";\nexport const RESULT = \"Result\"\nexport const TEXT = \"Text\"\nexport const ADVERB_TYPE = \"Adverb/particle Type\"\n\n// bibles\nexport const ESV = \"Esv\"\nexport const NA28 = \"Na28\"\nexport const ABBR = \"Abbr\"\nexport const REFERENCE = \"Reference\"\n\nexport const ALL = {\n  [PART]: [ADJECTIVE, NOUN, VERB, PRONOUN],\n  [GENDER]: [FEMININE, MASCULINE, NEUTER],\n  [CASE]: [NOMINATIVE, GENITIVE, DATIVE, ACCUSATIVE, VOCATIVE],\n  [TENSE]: [PRESENT, IMPERFECT, FUTURE, AORIST],\n  [VOICE]: [ACTIVE, MIDDLE, PASSIVE],\n  [NUMBER]: [SINGULAR, PLURAL],\n  [MOOD]: [INDICATIVE, IMPERATIVE, INFINITIVE, SUBJUNCTIVE, PARTICIPLE]\n}\n\nexport default ALL\n","import morphFilepath from './morphs.tsv'\nimport esvFilepath from './esv.tsv'\nimport na28Filepath from './na28.tsv'\nimport vocabFilepath from './vocab.tsv'\n\nimport { ABBR, CHAPTER, ESV, PART, RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, NA28, REFERENCE, TEXT } from './Filters.js'\n\nconst Papa = require('papaparse');\n\nclass Data {\n  static vocab = []\n  static morphs = []\n  static esv = {}\n  static na28 = {}\n\n  // idempotent\n  static loadData(callback) {\n    if (Data.vocab.length === 0) {\n      Data.loadFile(vocabFilepath, (contents) => {\n        let rows = []\n        Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n          .forEach(row => rows.push(row))\n        Data.vocab = rows\n      })\n    }\n\n    if (Data.morphs.length === 0) {\n      Data.loadFile(morphFilepath, (contents) => {\n          let rows = []\n          Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n            .forEach(row => rows.push(row))\n          Data.morphs = rows\n      })\n    }\n\n    if (Object.keys(Data.esv).length === 0) {\n      Data.loadFile(esvFilepath, (contents) => {\n        Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n          .forEach(row => Data.esv[row[ABBR]] = row[TEXT])\n      })\n    }\n\n    if (Object.keys(Data.na28).length === 0) {\n      Data.loadFile(na28Filepath, (contents) => {\n        Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n          .forEach(row => Data.na28[row[ABBR]] = row[TEXT])\n      })\n    }\n  }\n\n  static loadFile(filepath, callback) {\n    if (localStorage.getItem(filepath) != null) {\n      callback(localStorage.getItem(filepath))\n    } else {\n      let req = new XMLHttpRequest();\n      req.addEventListener(\"load\", (e) => {\n        localStorage.setItem(filepath, req.responseText)\n        callback(req.responseText)\n      })\n      req.open(\"GET\", filepath);\n      req.send();\n    }\n  }\n\n  static getRecords(filters) {\n    return Data.morphs\n      .filter(row => Object.keys(filters)\n          .filter(field => filters[field].length !== 0)\n          .every(field => row[field] === '-' || filters[field].includes(row[field])))\n      .filter(row => row[CHAPTER] !== '-')\n      .map(row => {\n        let references = row[REFERENCE].split(',')\n        let reference = references[Math.floor((Math.random() * references.length))]\n        return Object.assign(\n            {}, \n            row, \n            { \n              [REFERENCE]: reference,\n              [ESV]: Data.esv[reference],\n              [NA28]: Data.na28[reference],\n            })\n      })\n  }\n\n  static getFlashcards(filters, validFields) {\n    return Object.values(\n        Data.getRecords(filters)\n          .map(row => {\n            var fields;\n            switch (row[PART]) {\n              case \"noun\":\n                fields = [ RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, ESV ]; break;\n              case \"verb\":\n                fields = [ RESULT, LEMMA, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, ESV ]; break;\n              case \"adjective\":\n                fields = [ RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, ESV ]; break;\n              case \"conjunction\":\n              case \"preposition, adverb\":\n              case \"preposition\":\n                fields = [ RESULT, LEMMA, GLOSS, ESV ]; break;\n              case \"pronoun\":\n              case \"pronoun, adjective\":\n              case \"adjective, pronoun\":\n                fields = [ RESULT, LEMMA, GENDER, CASE, PERSON, NUMBER, GLOSS, ESV ]; break;\n              default:\n                fields = [ RESULT ]; break;\n            }\n            return [row, fields.filter(field => validFields.includes(field))]\n          })\n          .reduce((l, r) => {\n            let groupby = r[1].filter(field => field !== ESV).map(field => r[0][field]).join()\n            l[groupby] = (l[groupby] || r)\n            return l\n          }, {}))\n          .map(arr => {\n            let row = arr[0]\n            let fields = arr[1]\n\n            let front = row[RESULT]\n            let back = fields\n              .map(field => {\n                if (field === GLOSS) {\n                  return '\"' + row[GLOSS] + '\"'\n                } else if (field === ESV) {\n                  return \"<> \" + row[REFERENCE] + \" \" + row[ESV]\n                } else {\n                  return row[field]\n                }\n              })\n              .join(\" \")\n            return [front, back]\n          })\n  }\n\n  static getVocab(chapters) {\n    if (chapters) {\n      return Data.vocab\n        .filter(row => chapters.includes(row[CHAPTER]))\n    } else {\n      return Data.vocab\n    }\n  }\n}\n\nexport default Data;\n","import './App.css';\nimport React from 'react'\n\nimport Alert from 'react-bootstrap/Alert'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Offcanvas from 'react-bootstrap/Offcanvas'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nimport Data from './backend/Data.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { saveAs } from 'file-saver';\n\n\nimport {ALL, ADVERB_TYPE, RESULT, LEMMA, CASE, GENDER, NUMBER, MOOD, PERSON, TENSE, VOICE, CHAPTER, GLOSS, REFERENCE, ESV, NA28} from './backend/Filters.js'\nimport {PART, NOUN, VERB, ADJECTIVE, PREPOSITION, PRONOUN, ADVERB, CONJUNCTION } from './backend/Filters.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      records: [],\n      display: [],\n      filters: {},\n      fields: [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER],\n      showOffcanvas: false,\n      limit: 10,\n      chapters: '',\n      flashcardFields: [RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, ESV],\n      flashcards: [],\n      flashcardsPreview: [],\n      vocab: Data.getVocab(),\n    };\n\n    this.toggleFilter = this.toggleFilter.bind(this)\n    this.updateFields = this.updateFields.bind(this)\n    this.updateFlashcardFields = this.updateFlashcardFields.bind(this)\n    this.updateRecords = this.updateRecords.bind(this)\n    this.updateChapter = this.updateChapter.bind(this)\n    this.setOffcanvas = this.setOffcanvas.bind(this)\n    this.downloadRecords = this.downloadRecords.bind(this)\n  }\n\n  static fields = \n    [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER, ADVERB_TYPE, REFERENCE, ESV, NA28]\n  static flashcardFields =\n    [RESULT, LEMMA, GENDER, CASE, NUMBER, GLOSS, TENSE, VOICE, MOOD, PERSON, ESV]\n\n\n  componentDidMount() {\n    Data.loadData((records) => this.setState({ records: records }));\n  }\n\n  toggleFilter(type, value) {\n    this.setState((state, props) => {\n      let currFilters = state.filters[type] || []\n      let newFilters = currFilters.slice()\n\n      if (currFilters.includes(value)) {\n        newFilters.splice(newFilters.indexOf(value), 1)\n      } else {\n        newFilters.push(value)\n      }\n\n      return { filters: Object.assign({}, state.filters, { [type]: newFilters }) }\n    })\n    // TODO: refresh here?\n  }\n\n  updateChapter(event) {\n    this.setState({ chapters: event.target.value })\n  }\n\n  updateFields(value) {\n    this.setState((state, props) => {\n      let fields = (state.fields || []).slice()\n      if (fields.includes(value)) {\n        fields.splice(fields.indexOf(value), 1)\n      } else {\n        fields.push(value)\n      }\n\n      return { fields: fields }\n    })\n  }\n\n  updateFlashcardFields(value) {\n    this.setState((state, props) => {\n      let flashcardFields = (state.flashcardFields || []).slice()\n      if (flashcardFields.includes(value)) {\n        flashcardFields.splice(flashcardFields.indexOf(value), 1)\n      } else {\n        flashcardFields.push(value)\n      }\n\n      return { flashcardFields: flashcardFields }\n    })\n  }\n\n  updateRecords() {\n    let filters = this.state.filters\n\n    let chapters = []\n    let specific = []\n    this.state.chapters.replaceAll('ch', '').split(',')\n      .map(chapter => chapter.trim())\n      .forEach(chapter => {\n        if (chapter.includes('-')) {\n          let range = chapter.split('-')\n          for (var i = parseInt(range[0]); i < parseInt(range[1]) + 1; i++) {\n            chapters.push(i.toString())\n          }\n        } else if (!isNaN(chapter)) {\n          chapters.push(chapter)\n        } else {\n          specific.push(chapter)\n        }\n      })\n    let allNumbers = this.state.chapters.replaceAll('ch', '').split(',')\n      .every(arg => !isNaN(arg))\n    if (allNumbers) {\n      filters[CHAPTER] = chapters\n    } else {\n      specific.push.apply(specific, \n          Data.getVocab(chapters)\n            .map(row => row[LEMMA]))\n      filters[LEMMA] = specific\n    }\n\n    let records = Data.getRecords(filters)\n    let flashcards = Data.getFlashcards(filters, this.state.flashcardFields)\n    const index = Math.floor(Math.random() * records.length - this.state.limit)\n    const flashcardsIndex = flashcards.length > this.state.limit\n      ?  Math.floor(Math.random() * (flashcards.length - this.state.limit))\n      : 0\n\n    this.setState(\n    { \n      records: records,\n      display: records.slice(index, index + this.state.limit),\n      flashcards: flashcards,\n      flashcardsPreview: flashcards.slice(flashcardsIndex, flashcardsIndex + this.state.limit),\n    })\n  }\n\n  downloadRecords() {\n    var text = this.state.flashcards.map(row => row[0] + '\\t' + row[1]).join('\\n')\n    var blob = new Blob([ text ], { type: \"text/plain;charset=utf-8\" })\n    saveAs(blob, \"hello.txt\")\n  }\n\n  setOffcanvas(value) {\n    if (this.state.vocab.length > 0) {\n      this.setState({ showOffcanvas: value })\n    } else {\n      this.setState({ \n        showOffcanvas: value,\n        vocab: Data.getVocab()\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            \"SM Baugh A Greek Primer\"\n          </p>\n        </header>\n        <Container>\n          <Alert variant=\"success\" style={{ textAlign: 'left' }}>\n            <Row>\n              <h5>(1) I want to study...</h5>\n              <InputGroup size=\"sm\">\n                <Button variant=\"primary\" onClick={(e) => this.setOffcanvas(true, e)} className=\"me-2\">\n                  Browse Vocab\n                </Button>\n                <Form.Control\n                  aria-label=\"chapter restrictions (e.g. 2 or 2,3 or 2-4)\"\n                  aria-describedby=\"basic-addon1\"\n                  placeholder='e.g. \"ch2,10-11,πᾶς,εἰμί\". Leave blank for any chapter/word.'\n                  onChange={this.updateChapter}\n                />\n                <ToggleButtonGroup type=\"checkbox\" size=\"sm\">\n                  <ToggleButton variant=\"outline-secondary\" value=\"nouns\" id=\"nouns-filter\" onClick={(e) => this.toggleFilter(PART, NOUN, e)}>\n                    nouns\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"verbs\" id=\"verbs-filter\" onClick={(e) => this.toggleFilter(PART, VERB, e)}>\n                    verbs\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"adjectives\" id=\"adjectives-filter\" onClick={(e) => this.toggleFilter(PART, ADJECTIVE, e)}>\n                    adjectives\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"prepositions\" id=\"prepositions-filter\" onClick={(e) => this.toggleFilter(PART, PREPOSITION, e)}>\n                    preps\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"pronouns\" id=\"pronouns-filter\" onClick={(e) => this.toggleFilter(PART, PRONOUN, e)}>\n                    pronouns\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"adverb\" id=\"adverbs-filter\" onClick={(e) => this.toggleFilter(PART, ADVERB, e)}>\n                    adverbs\n                  </ToggleButton>\n                  <ToggleButton variant=\"outline-secondary\" value=\"conjunctions\" id=\"conjunctions-filter\" onClick={(e) => this.toggleFilter(PART, CONJUNCTION, e)}>\n                    conjunctions\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </InputGroup>\n            </Row>\n            <Row style={{ marginTop: '1rem' }}>\n              <h5>(2) ...with filters...</h5>\n            {/* filter selection */}\n              <ButtonToolbar style={{justifyContent: 'space-between'}}>\n\n              {Object.keys(ALL)\n                .filter(field => field !== PART)\n                .map(filterType => (\n                <ToggleButtonGroup id={filterType} key={filterType} type=\"checkbox\" size=\"sm\" >\n                  {ALL[filterType].map(filterValue => (\n                    <ToggleButton key={filterValue} id={filterValue} value={filterValue} variant='outline-success' onClick={(e) => this.toggleFilter(filterType, filterValue, e)}>\n                      {filterValue}\n                    </ToggleButton>\n                  ))}\n                </ToggleButtonGroup>\n              ))}\n              </ButtonToolbar>\n            </Row>\n          </Alert>\n          {/*\n          <Alert variant=\"dark\" style={{ textAlign: 'left' }}>\n          </Alert>\n          */}\n          <Alert variant=\"danger\" style={{ textAlign: 'left' }}>\n            <h5>(3) ...adjust flashcard fields...</h5>\n            <Row>\n              <ButtonGroup defaultValue={this.state.flashcardFields} size=\"sm\">\n                {App.flashcardFields.map(field => (\n                  <Button key={field} id={field} value={field} active={this.state.flashcardFields.includes(field)} variant='outline-secondary' onClick={(e) => this.updateFlashcardFields(field, e)}>\n                    {field}\n                  </Button>\n                ))\n                }\n              </ButtonGroup>\n            </Row>\n          </Alert>\n          <Alert variant=\"info\" style={{ textAlign: 'left' }}>\n              <Row>\n                <Col>\n                  <h5>(4) ...preview!</h5>\n                </Col>\n                {/* refresh! */}\n                <Col style={{ textAlign: 'right' }}>\n                  <Button onClick={this.updateRecords} variant=\"primary\">\n                    Refresh!\n                  </Button>\n                </Col>\n              </Row>\n              {/* preview dataset */}\n              <Row>\n                <Table responsive striped bordered hover size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th key='front' style={{whiteSpace: 'nowrap'}}>Front</th>\n                      <th key='back' style={{whiteSpace: 'nowrap'}}>Back</th>\n                      {/*\n                      {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                          <th key={field} style={{whiteSpace: 'nowrap'}}>{field}</th>\n                      ))}\n                      */}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.flashcardsPreview.map(row => (\n                        <tr key={'tr-' + row[0] + row[1]}>\n                          <td key='front' style={{whiteSpace: 'nowrap'}}>{row[0]}</td>\n                          <td key='back' style={{whiteSpace: 'nowrap'}}>{row[1]}</td>\n                          {/*\n                          {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                            <td key={field} style={{whiteSpace: 'nowrap'}}>{record[field]}</td>\n                          ))}\n                          */}\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              </Row>\n          </Alert>\n          {/* header section */}\n          <Alert variant=\"secondary\" style={{ textAlign: 'left' }}>\n            <h5>(5) Download flashcards</h5>\n            <Row>\n              <Col>\n                <Button onClick={this.downloadRecords}>\n                  Download Set ({this.state.flashcards.length} flashcards)\n                </Button>\n              </Col>\n            </Row>\n          </Alert>\n          <Offcanvas show={this.state.showOffcanvas} onHide={(e) => this.setOffcanvas(false, e)} placement=\"start\" scoll=\"true\">\n            <Offcanvas.Header closeButton>\n              <Offcanvas.Title>Vocab</Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n              <Container>\n                <Table responsive striped bordered hover size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th key='lemma' style={{whiteSpace: 'nowrap'}}>Lemma</th>\n                      <th key='part' style={{whiteSpace: 'nowrap'}}>Part</th>\n                      <th key='chapter' style={{whiteSpace: 'nowrap'}}>Ch</th>\n                      <th key='gloss' style={{whiteSpace: 'nowrap'}}>Gloss</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.vocab.map(row => (\n                        <tr key={'tr-' + row[0] + row[1]}>\n                          <td key='lemma' style={{whiteSpace: 'nowrap'}}>{row[LEMMA]}</td>\n                          <td key='part' style={{whiteSpace: 'nowrap'}}>{row[PART]}</td>\n                          <td key='chapter' style={{whiteSpace: 'nowrap'}}>{row[CHAPTER]}</td>\n                          <td key='gloss' style={{whiteSpace: 'nowrap'}}>{row[GLOSS]}</td>\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              </Container>\n            </Offcanvas.Body>\n          </Offcanvas>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}