{"version":3,"sources":["backend/morphs.tsv","backend/esv.tsv","backend/na28.tsv","backend/Filters.js","backend/Data.js","App.js","reportWebVitals.js","index.js"],"names":["CASE","GENDER","NUMBER","MOOD","PART","ADJECTIVE","NOUN","PRONOUN","VERB","PERSON","TENSE","VOICE","CHAPTER","GLOSS","LEMMA","RESULT","NA28","REFERENCE","ALL","Papa","require","Data","callback","morphs","length","loadFile","morphFilepath","contents","rows","parse","trimEnd","delimiter","header","data","forEach","row","push","Object","keys","esv","na28","getRecords","esvFilepath","na28Filepath","filepath","localStorage","getItem","req","XMLHttpRequest","addEventListener","e","setItem","responseText","open","send","filters","filter","field","every","includes","map","references","split","reference","Math","floor","random","assign","App","props","state","records","display","fields","showOffcanvas","limit","chapters","toggleFilter","bind","updateFields","updateRecords","updateChapter","setOffcanvas","downloadRecords","loadData","setState","type","value","this","currFilters","newFilters","slice","splice","indexOf","event","target","replaceAll","chapter","range","i","parseInt","toString","index","text","join","blob","Blob","saveAs","className","Container","Alert","variant","style","textAlign","InputGroup","size","Form","Control","placeholder","onChange","ToggleButtonGroup","ToggleButton","id","onClick","ButtonToolbar","justifyContent","filterType","filterValue","Row","ButtonGroup","defaultValue","Button","active","Col","Table","responsive","striped","bordered","hover","whiteSpace","record","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4bd06d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/morphs.17a65098.tsv\";","export default __webpack_public_path__ + \"static/media/esv.fe2ed14b.tsv\";","export default __webpack_public_path__ + \"static/media/na28.19940234.tsv\";","// case\nexport const CASE = \"Case\" \nexport const NOMINATIVE = \"nominative\"\nexport const GENITIVE = \"genitive\"\nexport const DATIVE = \"dative\"\nexport const ACCUSATIVE = \"accusative\"\nexport const VOCATIVE = \"vocative\"\n\n// gender\nexport const GENDER = \"Gender\";\nexport const FEMININE = \"feminine\"\nexport const MASCULINE = \"masculine\"\nexport const NEUTER = \"neuter\"\n\n// number\nexport const NUMBER = \"Number\"\nexport const SINGULAR = \"singular\"\nexport const PLURAL = \"plural\"\n\n// mood\nexport const MOOD = \"Mood\"\nexport const INDICATIVE = \"indicative\"\n\n// part of speech\nexport const PART = \"Part\"\nexport const ADJECTIVE = \"adjective\"\nexport const NOUN = \"noun\"\nexport const PREPOSITION = \"preposition\"\nexport const PRONOUN = \"pronoun\"\nexport const VERB = \"verb\"\n\n// person\nexport const PERSON = \"Person\"\nexport const FIRST = \"first person\"\nexport const SECOND = \"second person\"\nexport const THIRD = \"third person\"\n\n// tense\nexport const TENSE = \"Tense\"\nexport const AORIST = \"aorist\"\nexport const PERFECT = \"perfect\"\nexport const PRESENT = \"present\"\nexport const FUTURE = \"future\"\nexport const IMPERFECT = \"imperfect\"\n\n// voice\nexport const VOICE = \"Voice\"\nexport const MIDDLE = \"middle\"\nexport const PASSIVE = \"passive\"\nexport const ACTIVE = \"active\"\n\n// other headers\nexport const CHAPTER = \"Chapter\";\nexport const GLOSS = \"Gloss\";\nexport const LEMMA = \"Lemma\";\nexport const RESULT = \"Result\"\nexport const TEXT = \"Text\"\nexport const ADVERB = \"Adverb/particle Type\"\n\n// bibles\nexport const ESV = \"Esv\"\nexport const NA28 = \"Na28\"\nexport const ABBR = \"Abbr\"\nexport const REFERENCE = \"Reference\"\n\nexport const ALL = {\n  [PART]: [ADJECTIVE, NOUN, VERB, PRONOUN],\n  [GENDER]: [FEMININE, MASCULINE, NEUTER],\n  [CASE]: [NOMINATIVE, GENITIVE, DATIVE, ACCUSATIVE, VOCATIVE],\n  [TENSE]: [PRESENT, IMPERFECT, FUTURE, AORIST],\n  [VOICE]: [ACTIVE, MIDDLE, PASSIVE],\n  [NUMBER]: [SINGULAR, PLURAL],\n}\n\nexport default ALL\n","import morphFilepath from './morphs.tsv'\nimport esvFilepath from './esv.tsv'\nimport na28Filepath from './na28.tsv'\n\nimport { ABBR, CHAPTER, ESV, NA28, REFERENCE, TEXT } from './Filters.js'\n\nconst Papa = require('papaparse');\n\nclass Data {\n  static morphs = []\n  static esv = {}\n  static na28 = {}\n\n  // idempotent\n  static loadData(callback) {\n    if (Data.morphs.length === 0) {\n      Data.loadFile(morphFilepath, (contents) => {\n          let rows = []\n          Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n            .forEach(row => rows.push(row))\n          Data.morphs = rows\n          if (Data.morphs.length > 0 &&\n              Object.keys(Data.esv).length > 0 &&\n              Object.keys(Data.na28).length > 0) {\n            callback(Data.getRecords({}))\n          }\n      })\n    }\n\n    if (Object.keys(Data.esv).length === 0) {\n      Data.loadFile(esvFilepath, (contents) => {\n        Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n          .forEach(row => Data.esv[row[ABBR]] = row[TEXT])\n        if (Data.morphs.length > 0 &&\n            Object.keys(Data.esv).length > 0 &&\n            Object.keys(Data.na28).length > 0) {\n          callback(Data.getRecords({}))\n        }\n      })\n    }\n\n    if (Object.keys(Data.na28).length === 0) {\n      Data.loadFile(na28Filepath, (contents) => {\n        Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n          .forEach(row => Data.na28[row[ABBR]] = row[TEXT])\n        if (Data.morphs.length > 0 &&\n            Object.keys(Data.esv).length > 0 &&\n            Object.keys(Data.na28).length > 0) {\n          callback(Data.getRecords({}))\n        }\n      })\n    }\n  }\n\n  static loadFile(filepath, callback) {\n    if (localStorage.getItem(filepath) != null) {\n      callback(localStorage.getItem(filepath))\n    } else {\n      let req = new XMLHttpRequest();\n      req.addEventListener(\"load\", (e) => {\n        localStorage.setItem(filepath, req.responseText)\n        callback(req.responseText)\n      })\n      req.open(\"GET\", filepath);\n      req.send();\n    }\n  }\n\n  static getRecords(filters) {\n    return Data.morphs\n      .filter(row => Object.keys(filters)\n          .filter(field => filters[field].length !== 0)\n          .every(field => row[field] === '-' || filters[field].includes(row[field])))\n      .filter(row => row[CHAPTER] !== '-')\n      .map(row => {\n        let references = row[REFERENCE].split(',')\n        let reference = references[Math.floor((Math.random() * references.length))]\n        return Object.assign(\n            {}, \n            row, \n            { \n              [REFERENCE]: reference,\n              [ESV]: Data.esv[reference],\n              [NA28]: Data.na28[reference],\n            })\n      })\n  }\n}\n\nexport default Data;\n","import './App.css';\nimport React from 'react'\n\nimport Alert from 'react-bootstrap/Alert'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Offcanvas from 'react-bootstrap/Offcanvas'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nimport Data from './backend/Data.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { saveAs } from 'file-saver';\n\n\nimport {ALL, ADVERB, RESULT, LEMMA, CASE, GENDER, NUMBER, MOOD, PERSON, TENSE, VOICE, CHAPTER, GLOSS, REFERENCE, ESV, NA28} from './backend/Filters.js'\nimport {PART, NOUN, VERB, ADJECTIVE, PREPOSITION, PRONOUN } from './backend/Filters.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      records: [],\n      display: [],\n      filters: {},\n      fields: [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER],\n      showOffcanvas: false,\n      limit: 10,\n      chapters: '',\n    };\n\n    this.toggleFilter = this.toggleFilter.bind(this)\n    this.updateFields = this.updateFields.bind(this)\n    this.updateRecords = this.updateRecords.bind(this)\n    this.updateChapter = this.updateChapter.bind(this)\n    this.setOffcanvas = this.setOffcanvas.bind(this)\n    this.downloadRecords = this.downloadRecords.bind(this)\n  }\n\n  static fields = \n    [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER, ADVERB, REFERENCE, ESV, NA28]\n\n  componentDidMount() {\n    Data.loadData((records) => this.setState({ records: records }));\n  }\n\n  toggleFilter(type, value) {\n    this.setState((state, props) => {\n      let currFilters = state.filters[type] || []\n      let newFilters = currFilters.slice()\n\n      if (currFilters.includes(value)) {\n        newFilters.splice(newFilters.indexOf(value), 1)\n      } else {\n        newFilters.push(value)\n      }\n\n      return { filters: Object.assign({}, state.filters, { [type]: newFilters }) }\n    })\n    // TODO: refresh here?\n  }\n\n  updateChapter(event) {\n    this.setState({ chapters: event.target.value })\n  }\n\n  updateFields(value) {\n    this.setState((state, props) => {\n      let fields = (state.fields || []).slice()\n      if (fields.includes(value)) {\n        fields.splice(fields.indexOf(value), 1)\n      } else {\n        fields.push(value)\n      }\n\n      return { fields: fields }\n    })\n  }\n\n  updateRecords() {\n    let filters = this.state.filters\n    let chapters = []\n    this.state.chapters.replaceAll('ch', '').split(',')\n      .forEach(chapter => {\n        if (chapter.includes('-')) {\n          let range = chapter.split('-')\n          for (var i = parseInt(range[0]); i < parseInt(range[1]) + 1; i++) {\n            chapters.push(i.toString())\n          }\n        } else {\n          chapters.push(chapter)\n        }\n      })\n    filters[CHAPTER] = chapters\n\n    let records = Data.getRecords(this.state.filters)\n    const index = Math.floor(Math.random() * records.length - this.state.limit)\n    this.setState(\n    { \n      records: records,\n      display: records.slice(index, index + this.state.limit),\n    })\n  }\n\n  downloadRecords() {\n    var text = App.fields.filter(field => this.state.fields.includes(field)).join('\\t') + '\\n' +\n      this.state.records.map(row => App.fields.filter(field => this.state.fields.includes(field)).map(field => row[field]).join('\\t')).join ('\\n')\n    var blob = new Blob([ text ], { type: \"text/plain;charset=utf-8\" })\n    saveAs(blob, \"hello.txt\")\n  }\n\n  setOffcanvas(value) {\n    this.setState({ showOffcanvas: value })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            \"SM Baugh A Greek Primer\"\n          </p>\n        </header>\n        <Container>\n          <Alert variant=\"success\" style={{ textAlign: 'left' }}>\n            <h5>(1) I want to study...</h5>\n            <InputGroup size=\"sm\">\n              <Form.Control\n                aria-label=\"chapter restrictions (e.g. 2 or 2,3 or 2-4)\"\n                aria-describedby=\"basic-addon1\"\n                placeholder=\"e.g. 'ch2,3,4' or '2-10'. Leave blank for any chapter.\"\n                onChange={this.updateChapter}\n              />\n              <ToggleButtonGroup type=\"checkbox\" size=\"sm\">\n                <ToggleButton variant=\"outline-secondary\" value=\"nouns\" id=\"nouns-filter\" onClick={(e) => this.toggleFilter(PART, NOUN, e)}>\n                  nouns\n                </ToggleButton>\n                <ToggleButton variant=\"outline-secondary\" value=\"verbs\" id=\"verbs-filter\" onClick={(e) => this.toggleFilter(PART, VERB, e)}>\n                  verbs\n                </ToggleButton>\n                <ToggleButton variant=\"outline-secondary\" value=\"adjectives\" id=\"adjectives-filter\" onClick={(e) => this.toggleFilter(PART, ADJECTIVE, e)}>\n                  adjectives\n                </ToggleButton>\n                <ToggleButton variant=\"outline-secondary\" value=\"prepositions\" id=\"prepositions-filter\" onClick={(e) => this.toggleFilter(PART, PREPOSITION, e)}>\n                  preps\n                </ToggleButton>\n                <ToggleButton variant=\"outline-secondary\" value=\"pronouns\" id=\"pronouns-filter\" onClick={(e) => this.toggleFilter(PART, PRONOUN, e)}>\n                  pronouns\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </InputGroup>\n          </Alert>\n          <Alert variant=\"danger\" style={{ textAlign: 'left' }}>\n            <h5>(2) ...with filters...</h5>\n          {/* filter selection */}\n            <ButtonToolbar style={{justifyContent: 'space-between'}}>\n\n            {Object.keys(ALL)\n              .filter(field => field !== PART)\n              .map(filterType => (\n              <ToggleButtonGroup id={filterType} key={filterType} type=\"checkbox\" size=\"sm\" >\n                {ALL[filterType].map(filterValue => (\n                  <ToggleButton key={filterValue} id={filterValue} value={filterValue} variant='outline-success' onClick={(e) => this.toggleFilter(filterType, filterValue, e)}>\n                    {filterValue}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n            ))}\n            </ButtonToolbar>\n          </Alert>\n          <Alert variant=\"dark\" style={{ textAlign: 'left' }}>\n            <h5>(3) ...adjust final fields...</h5>\n            <Row>\n              {/* select output */}\n              <ButtonGroup defaultValue={this.state.fields} size=\"sm\">\n                {App.fields.map(field => (\n                  <Button key={field} id={field} value={field} active={this.state.fields.includes(field)} variant='outline-secondary' onClick={(e) => this.updateFields(field, e)}>\n                    {field}\n                  </Button>\n                ))\n                }\n              </ButtonGroup>\n            </Row>\n          </Alert>\n          <Alert variant=\"info\" style={{ textAlign: 'left' }}>\n              <Row>\n                <Col>\n                  <h5>(4) ...preview!</h5>\n                </Col>\n                {/* refresh! */}\n                <Col style={{ textAlign: 'right' }}>\n                  <Button onClick={this.updateRecords} variant=\"primary\">\n                    Refresh!\n                  </Button>\n                </Col>\n              </Row>\n              {/* preview dataset */}\n              <Row>\n                <Table responsive striped bordered hover size=\"sm\">\n                  <thead>\n                    <tr>\n                      {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                          <th key={field} style={{whiteSpace: 'nowrap'}}>{field}</th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.display.map(record => (\n                        <tr key={'tr-' + record[RESULT] + record[REFERENCE]}>\n                          {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                            <td key={field} style={{whiteSpace: 'nowrap'}}>{record[field]}</td>\n                          ))}\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              </Row>\n          </Alert>\n          {/* header section */}\n          <Alert variant=\"secondary\" style={{ textAlign: 'left' }}>\n            <h5>(5) ...download!</h5>\n            <Row>\n              {/*\n              <Col>\n                <Button variant=\"primary\" onClick={(e) => this.setOffcanvas(true, e)} className=\"me-2\">\n                  Adjust filters\n                </Button>\n              </Col>\n              */}\n              <Col>\n                <Button onClick={this.downloadRecords}>\n                  Download Set ({this.state.records.length} rows)\n                </Button>\n              </Col>\n            </Row>\n          </Alert>\n          {/*\n          <Offcanvas show={this.state.showOffcanvas} onHide={(e) => this.setOffcanvas(false, e)} placement=\"start\" scoll=\"true\">\n            <Offcanvas.Header closeButton>\n              <Offcanvas.Title>Adjust filters</Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n              <Container>\n                {Object.keys(ALL).map(filterType => (\n                  <Row style={ { margin: '1rem' } }>\n                    <ToggleButtonGroup id={filterType} key={filterType} defaultValue={ALL[filterType]} type=\"checkbox\" size=\"sm\" style={{justifyContent: 'space-between'}}>\n                      {ALL[filterType].map(filterValue => (\n                        <ToggleButton key={filterValue} id={filterValue} value={filterValue} variant='outline-success' onClick={(e) => this.toggleFilter(filterType, filterValue, e)}>\n                          {filterValue}\n                        </ToggleButton>\n                      ))}\n                    </ToggleButtonGroup>\n                  </Row>\n                ))}\n              <Button onClick={(e) => { this.updateRecords(e); this.setOffcanvas(false, e)} }>\n                Refresh!\n              </Button>\n              </Container>\n            </Offcanvas.Body>\n          </Offcanvas>\n          */}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}