{"version":3,"sources":["backend/morphs.tsv","backend/esv.tsv","backend/na28.tsv","backend/Filters.js","backend/Data.js","App.js","reportWebVitals.js","index.js"],"names":["CASE","GENDER","NUMBER","MOOD","PART","PERSON","TENSE","VOICE","CHAPTER","GLOSS","LEMMA","RESULT","NA28","REFERENCE","ALL","Papa","require","Data","filepath","callback","localStorage","getItem","req","XMLHttpRequest","addEventListener","e","setItem","responseText","open","send","morphs","length","loadFile","morphFilepath","contents","rows","parse","trimEnd","delimiter","header","data","forEach","row","push","Object","keys","esv","na28","getRecords","esvFilepath","na28Filepath","filters","filter","every","fil","Array","isArray","includes","map","refs","split","ref","Math","floor","random","assign","App","props","state","records","display","fields","showOffcanvas","limit","console","log","updateFilters","bind","updateFields","updateRecords","setOffcanvas","downloadRecords","loadData","setState","type","value","this","currFilters","newFilters","slice","splice","indexOf","index","text","field","join","blob","Blob","saveAs","className","Container","ButtonToolbar","style","justifyContent","filterType","ToggleButtonGroup","id","size","filterValue","ToggleButton","variant","onClick","Row","Col","Button","marginTop","ButtonGroup","defaultValue","active","Table","responsive","striped","bordered","hover","whiteSpace","record","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95188c7b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/morphs.17a65098.tsv\";","export default __webpack_public_path__ + \"static/media/esv.fe2ed14b.tsv\";","export default __webpack_public_path__ + \"static/media/na28.19940234.tsv\";","// case\nexport const CASE = \"Case\" \nexport const NOMINATIVE = \"nominative\"\nexport const GENITIVE = \"genitive\"\nexport const DATIVE = \"dative\"\nexport const ACCUSATIVE = \"accusative\"\nexport const VOCATIVE = \"vocative\"\n\n// gender\nexport const GENDER = \"Gender\";\nexport const FEMININE = \"feminine\"\nexport const MASCULINE = \"masculine\"\nexport const NEUTER = \"neuter\"\n\n// number\nexport const NUMBER = \"Number\"\nexport const SINGULAR = \"singular\"\nexport const PLURAL = \"plural\"\n\n// mood\nexport const MOOD = \"Mood\"\nexport const INDICATIVE = \"indicative\"\n\n// part of speech\nexport const PART = \"Part\"\nexport const ADJECTIVE = \"adjective\"\nexport const NOUN = \"noun\"\nexport const PRONOUN = \"pronoun\"\nexport const VERB = \"verb\"\n\n// person\nexport const PERSON = \"Person\"\nexport const FIRST = \"first person\"\nexport const SECOND = \"second person\"\nexport const THIRD = \"third person\"\n\n// tense\nexport const TENSE = \"Tense\"\nexport const AORIST = \"aorist\"\nexport const PERFECT = \"perfect\"\nexport const PRESENT = \"present\"\nexport const FUTURE = \"future\"\nexport const IMPERFECT = \"imperfect\"\n\n// voice\nexport const VOICE = \"Voice\"\nexport const MIDDLE = \"middle\"\nexport const PASSIVE = \"passive\"\nexport const ACTIVE = \"active\"\n\n// other headers\nexport const CHAPTER = \"Chapter\";\nexport const GLOSS = \"Gloss\";\nexport const LEMMA = \"Lemma\";\nexport const RESULT = \"Result\"\nexport const TEXT = \"Text\"\nexport const ADVERB = \"Adverb/particle Type\"\n\n// bibles\nexport const ESV = \"Esv\"\nexport const NA28 = \"Na28\"\nexport const ABBR = \"Abbr\"\nexport const REFERENCE = \"Reference\"\n\nexport const ALL = {\n  [GENDER]: [FEMININE, MASCULINE, NEUTER],\n  [CASE]: [NOMINATIVE, GENITIVE, DATIVE, ACCUSATIVE, VOCATIVE],\n  [PART]: [ADJECTIVE, NOUN, VERB, PRONOUN],\n  [TENSE]: [PRESENT, IMPERFECT, FUTURE, AORIST],\n  [VOICE]: [ACTIVE, MIDDLE, PASSIVE],\n  [NUMBER]: [SINGULAR, PLURAL],\n}\n\nexport default ALL\n","import morphFilepath from './morphs.tsv'\nimport esvFilepath from './esv.tsv'\nimport na28Filepath from './na28.tsv'\n\nimport { ABBR, ESV, LEMMA, NA28, REFERENCE, TEXT } from './Filters.js'\n\nconst Papa = require('papaparse');\n\nclass Data {\n  static morphs = []\n  static esv = {}\n  static na28 = {}\n\n  static loadFile(filepath, callback) {\n    if (localStorage.getItem(filepath) != null) {\n      callback(localStorage.getItem(filepath))\n    } else {\n      let req = new XMLHttpRequest();\n      req.addEventListener(\"load\", (e) => {\n        localStorage.setItem(filepath, req.responseText)\n        callback(req.responseText)\n      })\n      req.open(\"GET\", filepath);\n      req.send();\n    }\n  }\n\n  // idempotent\n  static loadData(callback) {\n    if (Data.morphs.length === 0) {\n      Data.loadFile(morphFilepath, (contents) => {\n          let rows = []\n          Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n            .forEach(row => rows.push(row))\n          Data.morphs = rows\n          if (Data.morphs.length > 0 &&\n              Object.keys(Data.esv).length > 0 &&\n              Object.keys(Data.na28).length > 0) {\n            callback(Data.getRecords({}))\n          }\n      })\n    }\n\n    if (Object.keys(Data.esv).length === 0) {\n      Data.loadFile(esvFilepath, (contents) => {\n        Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n          .forEach(row => Data.esv[row[ABBR]] = row[TEXT])\n        if (Data.morphs.length > 0 &&\n            Object.keys(Data.esv).length > 0 &&\n            Object.keys(Data.na28).length > 0) {\n          callback(Data.getRecords({}))\n        }\n      })\n    }\n\n    if (Object.keys(Data.na28).length === 0) {\n      Data.loadFile(na28Filepath, (contents) => {\n        Papa.parse(contents.trimEnd(), { delimiter: '\\t', header: true }).data\n          .forEach(row => Data.na28[row[ABBR]] = row[TEXT])\n        if (Data.morphs.length > 0 &&\n            Object.keys(Data.esv).length > 0 &&\n            Object.keys(Data.na28).length > 0) {\n          callback(Data.getRecords({}))\n        }\n      })\n    }\n  }\n\n  static getRecords(filters) {\n    return Data.morphs\n      .filter(\n          row => Object.keys(filters).every(\n              fil => Array.isArray(filters[fil]) \n                  ? filters[fil].length === 0 || filters[fil].includes(row[fil])\n                  : row[fil] === filters[fil]))\n      .map(row => {\n        let refs = row[REFERENCE].split(',')\n        let ref = refs[Math.floor((Math.random() * refs.length))]\n        return Object.assign(\n            {}, \n            row, \n            { \n              [REFERENCE]: ref,\n              [ESV]: Data.esv[ref],\n              [NA28]: Data.na28[ref],\n            })\n      })\n  }\n}\n\nexport default Data;\n","import './App.css';\nimport React from 'react'\nimport Data from './backend/Data.js'\n\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Offcanvas from 'react-bootstrap/Offcanvas'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { saveAs } from 'file-saver';\n\n\nimport {ALL, ADVERB, RESULT, LEMMA, CASE, GENDER, NUMBER, MOOD, PART, PERSON, TENSE, VOICE, CHAPTER, GLOSS, REFERENCE, ESV, NA28} from './backend/Filters.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      records: [],\n      display: [],\n      filters: {},\n      fields: [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER],\n      showOffcanvas: false,\n      limit: 20,\n    };\n    console.log(\"constructor\")\n\n    this.updateFilters = this.updateFilters.bind(this)\n    this.updateFields = this.updateFields.bind(this)\n    this.updateRecords = this.updateRecords.bind(this)\n    this.setOffcanvas = this.setOffcanvas.bind(this)\n    this.downloadRecords = this.downloadRecords.bind(this)\n  }\n\n  static fields = \n    [RESULT, LEMMA, GENDER, CASE, TENSE, VOICE, MOOD, PERSON, NUMBER, GLOSS, PART, CHAPTER, ADVERB, REFERENCE, ESV, NA28]\n\n  componentDidMount() {\n    Data.loadData((records) => this.setState({ records: records }));\n  }\n\n  updateFilters(type, value) {\n    this.setState((state, props) => {\n      let currFilters = state.filters[type] || []\n      let newFilters = currFilters.slice()\n\n      if (currFilters.includes(value)) {\n        newFilters.splice(newFilters.indexOf(value), 1)\n      } else {\n        newFilters.push(value)\n      }\n\n      return { filters: Object.assign({}, state.filters, { [type]: newFilters }) }\n    })\n    // TODO: refresh here?\n  }\n\n  updateFields(value) {\n    this.setState((state, props) => {\n      let fields = (state.fields || []).slice()\n      if (fields.includes(value)) {\n        fields.splice(fields.indexOf(value), 1)\n      } else {\n        fields.push(value)\n      }\n\n      return { fields: fields }\n    })\n  }\n\n  updateRecords() {\n    let records = Data.getRecords(this.state.filters)\n    const index = Math.floor(Math.random() * records.length - this.state.limit)\n    this.setState(\n    { \n      records: records,\n      display: records.slice(index, index + this.state.limit),\n    })\n  }\n\n  downloadRecords() {\n    var text = App.fields.filter(field => this.state.fields.includes(field)).join('\\t') + '\\n' +\n      this.state.records.map(row => App.fields.filter(field => this.state.fields.includes(field)).map(field => row[field]).join('\\t')).join ('\\n')\n    var blob = new Blob([ text ], { type: \"text/plain;charset=utf-8\" })\n    saveAs(blob, \"hello.txt\")\n  }\n\n  setOffcanvas(value) {\n    this.setState({ showOffcanvas: value })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            \"SM Baugh A Greek Primer\"\n          </p>\n        </header>\n        <Container>\n          {/* filter selection */}\n            <ButtonToolbar style={{justifyContent: 'space-between'}}>\n\n            {Object.keys(ALL).map(filterType => (\n              <ToggleButtonGroup id={filterType} key={filterType} type=\"checkbox\" size=\"sm\" >\n                {ALL[filterType].map(filterValue => (\n                  <ToggleButton key={filterValue} id={filterValue} value={filterValue} variant='outline-success' onClick={(e) => this.updateFilters(filterType, filterValue, e)}>\n                    {filterValue}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n            ))}\n            </ButtonToolbar>\n          {/*\n          <Offcanvas show={this.state.showOffcanvas} onHide={(e) => this.setOffcanvas(false, e)} placement=\"start\" scoll=\"true\">\n            <Offcanvas.Header closeButton>\n              <Offcanvas.Title>Adjust filters</Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n              <Container>\n                {Object.keys(ALL).map(filterType => (\n                  <Row style={ { margin: '1rem' } }>\n                    <ToggleButtonGroup id={filterType} key={filterType} defaultValue={ALL[filterType]} type=\"checkbox\" size=\"sm\" style={{justifyContent: 'space-between'}}>\n                      {ALL[filterType].map(filterValue => (\n                        <ToggleButton key={filterValue} id={filterValue} value={filterValue} variant='outline-success' onClick={(e) => this.updateFilters(filterType, filterValue, e)}>\n                          {filterValue}\n                        </ToggleButton>\n                      ))}\n                    </ToggleButtonGroup>\n                  </Row>\n                ))}\n              <Button onClick={(e) => { this.updateRecords(e); this.setOffcanvas(false, e)} }>\n                Refresh!\n              </Button>\n              </Container>\n            </Offcanvas.Body>\n          </Offcanvas>\n          */}\n\n          {/* header section */}\n          <Row>\n            <Col>\n              <Button variant=\"primary\" onClick={(e) => this.setOffcanvas(true, e)} className=\"me-2\">\n                Adjust filters\n              </Button>\n            </Col>\n            <Col>\n              <Button onClick={this.updateRecords}>\n                Refresh!\n              </Button>\n            </Col>\n            <Col>\n              <Button onClick={this.downloadRecords}>\n                Download Set ({this.state.records.length} rows)\n              </Button>\n            </Col>\n          </Row>\n          <Row style={ { marginTop: '1rem' } }>\n            <Col>\n              {/* refresh! */}\n              <Row>\n                <Container>\n                </Container>\n              </Row>\n              <Row>\n                {/* select output */}\n                <ButtonGroup defaultValue={this.state.fields} size=\"sm\">\n                  {App.fields.map(field => (\n                    <Button key={field} id={field} value={field} active={this.state.fields.includes(field)} variant='outline-secondary' onClick={(e) => this.updateFields(field, e)}>\n                      {field}\n                    </Button>\n                  ))\n                  }\n                </ButtonGroup>\n              </Row>\n              {/* preview dataset */}\n              <Row>\n                <Table responsive striped bordered hover size=\"sm\">\n                  <thead>\n                    <tr>\n                      {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                          <th key={field} style={{whiteSpace: 'nowrap'}}>{field}</th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.display.map(record => (\n                        <tr key={'tr-' + record[RESULT]}>\n                          {App.fields.filter(field => this.state.fields.includes(field)).map(field => (\n                            <td key={field} style={{whiteSpace: 'nowrap'}}>{record[field]}</td>\n                          ))}\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}